"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

–¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è Telegram –±–æ—Ç–∞, —è–∫–∏–π
–æ–±—Ä–æ–±–ª—è—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
–¥–æ API.
"""

import logging
import asyncio
import httpx
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from src.config.settings import settings
from src.core.models.logging.providers import get_global_logger

# –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä
logger = get_global_logger()
if not logger:
    logger = logging.getLogger(__name__)

# URL –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ callback API
API_URL = f"{settings.API_BASE_URL}/api/v1/telegram/callback"
API_DIRECT_LOGIN_URL = f"{settings.API_BASE_URL}/api/v1/telegram/direct-login"

# –¢–µ–∫—Å—Ç–∏ –¥–ª—è –±–æ—Ç–∞
WELCOME_MESSAGE = (
    "–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —É —Å–∏—Å—Ç–µ–º—ñ {app_name}.\n\n"
    "–î–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'. "
    "–ü–æ—Ç—ñ–º –ø–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, —è–∫–µ –≤–∞–º –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ."
)

AUTH_REQUEST_MESSAGE = (
    "üîê –ó–∞–ø–∏—Ç –Ω–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –¥–ª—è {email}.\n\n"
    "–Ø–∫—â–æ —Ü–µ –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É {app_name}, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏'.\n\n"
    "–Ø–∫—â–æ –≤–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è —É–≤—ñ–π—Ç–∏, –ø—Ä–æ—ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
)

AUTH_CONFIRMED_MESSAGE = (
    "‚úÖ –ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
    "–í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ —Å–∞–π—Ç {app_name} —ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É."
)

AUTH_ERROR_MESSAGE = (
    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.\n\n"
    "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
)

DIRECT_LOGIN_MESSAGE = (
    "üîë –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —á–µ—Ä–µ–∑ Telegram!\n\n"
    "–î–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É {app_name} –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
)


async def send_callback_to_api(
    auth_code: str, user_data: Dict[str, Any]
) -> Optional[Dict[str, Any]]:
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î callback –¥–æ API –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.
    
    Args:
        auth_code: –ö–æ–¥ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        user_data: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram
        
    Returns:
        Optional[Dict[str, Any]]: –í—ñ–¥–ø–æ–≤—ñ–¥—å API –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                API_URL,
                json={
                    "auth_code": auth_code,
                    "telegram_id": user_data["id"],
                    "telegram_username": user_data.get("username"),
                    "first_name": user_data.get("first_name"),
                    "last_name": user_data.get("last_name"),
                },
                headers={"Content-Type": "application/json"},
                timeout=10.0,
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(
                    f"API error: {response.status_code} - {response.text}",
                    module="auth.telegram.bot",
                )
                return None
    
    except Exception as e:
        logger.error(
            f"Error sending callback to API: {str(e)}",
            module="auth.telegram.bot",
        )
        return None


async def direct_login(telegram_id: int) -> Optional[Dict[str, Any]]:
    """
    –í–∏–∫–æ–Ω—É—î –ø—Ä—è–º–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ Telegram ID.
    
    Args:
        telegram_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram
        
    Returns:
        Optional[Dict[str, Any]]: –í—ñ–¥–ø–æ–≤—ñ–¥—å API –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_DIRECT_LOGIN_URL}/{telegram_id}",
                headers={"Content-Type": "application/json"},
                timeout=10.0,
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(
                    f"API direct login error: {response.status_code} - {response.text}",
                    module="auth.telegram.bot",
                )
                return None
    
    except Exception as e:
        logger.error(
            f"Error in direct login: {str(e)}",
            module="auth.telegram.bot",
        )
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–¥—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.
    """
    user = update.effective_user
    args = context.args
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    if not args:
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –∫–æ–¥—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        await update.message.reply_text(
            WELCOME_MESSAGE.format(app_name=settings.APP_NAME)
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–∏—Å—Ç–µ–º—ñ
        result = await direct_login(user.id)
        
        if result and result.get("status") == "success":
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥
            keyboard = [
                [
                    InlineKeyboardButton(
                        f"–£–≤—ñ–π—Ç–∏ –≤ {settings.APP_NAME}", 
                        url=f"{settings.WEBSITE_URL}?telegramLogin={user.id}"
                    )
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                DIRECT_LOGIN_MESSAGE.format(app_name=settings.APP_NAME),
                reply_markup=reply_markup,
            )
        
        return
    
    # –û–±—Ä–æ–±–∫–∞ –∫–æ–¥—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    arg = args[0]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–æ–¥ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    if arg.startswith("auth_"):
        auth_code = arg[5:]  # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å "auth_"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∫–æ–ª–±–µ–∫–∞—Ö
        context.user_data["auth_code"] = auth_code
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑ API
        result = await send_callback_to_api(auth_code, user.to_dict())
        
        if result and result.get("status") == "success":
            # –û—Ç—Ä–∏–º—É—î–º–æ email –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            email = result.get("data", {}).get("email", "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
            keyboard = [
                [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm_{auth_code}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                AUTH_REQUEST_MESSAGE.format(email=email, app_name=settings.APP_NAME),
                reply_markup=reply_markup,
            )
        else:
            await update.message.reply_text(AUTH_ERROR_MESSAGE)
    else:
        # –ù–µ–≤—ñ–¥–æ–º–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
        await update.message.reply_text(
            WELCOME_MESSAGE.format(app_name=settings.APP_NAME)
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.
    """
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∫–æ–ª–±–µ–∫—ñ–≤
    if query.data.startswith("confirm_"):
        auth_code = query.data[8:]  # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å "confirm_"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–æ API
        result = await send_callback_to_api(auth_code, query.from_user.to_dict())
        
        if result and result.get("status") == "success":
            await query.edit_message_text(
                AUTH_CONFIRMED_MESSAGE.format(app_name=settings.APP_NAME)
            )
        else:
            await query.edit_message_text(AUTH_ERROR_MESSAGE)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help.
    """
    await update.message.reply_text(
        f"–¶–µ–π –±–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ {settings.APP_NAME}.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/login - –®–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (—è–∫—â–æ –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ)\n\n"
        "–î–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'."
    )


async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /login.
    """
    user = update.effective_user
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–∏—Å—Ç–µ–º—ñ
    result = await direct_login(user.id)
    
    if result and result.get("status") == "success":
        # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —à–≤–∏–¥–∫–∏–π –≤—Ö—ñ–¥
        keyboard = [
            [
                InlineKeyboardButton(
                    f"–£–≤—ñ–π—Ç–∏ –≤ {settings.APP_NAME}", 
                    url=f"{settings.WEBSITE_URL}?telegramLogin={user.id}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            DIRECT_LOGIN_MESSAGE.format(app_name=settings.APP_NAME),
            reply_markup=reply_markup,
        )
    else:
        await update.message.reply_text(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ –∞–±–æ –≤–∞—à –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∏–π –∑ Telegram.\n\n"
            f"–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç {settings.WEBSITE_URL} —ñ –≤–∏–±–µ—Ä—ñ—Ç—å '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'."
        )


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞.
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≥—Ä–∞–º–∏
    application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
