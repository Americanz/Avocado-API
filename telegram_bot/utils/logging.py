"""
–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""
import logging
from telegram_bot.config import settings
from aiogram.types import Message, CallbackQuery, User

logger = logging.getLogger(__name__)


def log_user_action(action_type: str, user: User, details: str = "", **kwargs):
    """
    –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∫–ª—é—á–µ–Ω–Ω—è/–≤–∏–∫–ª—é—á–µ–Ω–Ω—è
    
    Args:
        action_type: –¢–∏–ø –¥—ñ—ó (command, button, message, etc.)
        user: –û–±'—î–∫—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        details: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
        **kwargs: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """
    if not settings.LOG_USER_ACTIONS:
        return
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_info = f"{user.id}"
    if user.username:
        user_info += f" (@{user.username})"
    if user.first_name:
        user_info += f" [{user.first_name}"
        if user.last_name:
            user_info += f" {user.last_name}"
        user_info += "]"
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –¥—ñ—ó
    if action_type == "command" and settings.LOG_COMMANDS:
        logger.info(f"üîß –ö–æ–º–∞–Ω–¥–∞ {details} –≤—ñ–¥ {user_info}")
    elif action_type == "button" and settings.LOG_BUTTON_CLICKS:
        logger.info(f"üîò –ö–Ω–æ–ø–∫–∞ '{details}' –≤—ñ–¥ {user_info}")
    elif action_type == "message" and settings.LOG_MESSAGES:
        logger.info(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è '{details}' –≤—ñ–¥ {user_info}")
    elif action_type == "callback" and settings.LOG_BUTTON_CLICKS:
        logger.info(f"‚ö° Callback '{details}' –≤—ñ–¥ {user_info}")
    elif action_type == "fsm" and settings.VERBOSE_LOGGING:
        logger.info(f"üîÑ FSM '{details}' –≤—ñ–¥ {user_info}")
    elif action_type == "admin" and settings.LOG_USER_ACTIONS:
        logger.info(f"üëë –ê–¥–º—ñ–Ω –¥—ñ—è '{details}' –≤—ñ–¥ {user_info}")
    elif action_type == "error":
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ '{details}' –≤—ñ–¥ {user_info}")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –¥–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
    if settings.VERBOSE_LOGGING and kwargs:
        for key, value in kwargs.items():
            logger.debug(f"   {key}: {value}")


def log_command(message: Message, command: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏"""
    log_user_action("command", message.from_user, command, message_id=message.message_id)


def log_button_click(message: Message, button_text: str, handler_name: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏"""
    details = button_text
    if handler_name and settings.VERBOSE_LOGGING:
        details += f" (handler: {handler_name})"
    log_user_action("button", message.from_user, details, 
                   message_id=message.message_id, handler=handler_name)


def log_callback_query(query: CallbackQuery, callback_data: str):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è callback –∑–∞–ø–∏—Ç—É"""
    log_user_action("callback", query.from_user, callback_data, 
                   query_id=query.id)


def log_message(message: Message, content: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not content:
        content = message.text or "[–Ω–µ —Ç–µ–∫—Å—Ç]"
    log_user_action("message", message.from_user, content[:50] + "..." if len(content) > 50 else content,
                   message_id=message.message_id, chat_id=message.chat.id)


def log_fsm_state(message: Message, state: str, action: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ FSM —Å—Ç–∞–Ω—É"""
    details = f"{state}"
    if action:
        details += f" ({action})"
    log_user_action("fsm", message.from_user, details,
                   message_id=message.message_id)


def log_admin_action(message: Message, action: str, target: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    details = action
    if target:
        details += f" -> {target}"
    log_user_action("admin", message.from_user, details,
                   message_id=message.message_id)


def log_error(user: User, error: str, context: str = ""):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
    details = error
    if context:
        details = f"{context}: {error}"
    log_user_action("error", user, details)


def get_logging_status():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    return {
        "user_actions": settings.LOG_USER_ACTIONS,
        "button_clicks": settings.LOG_BUTTON_CLICKS,
        "commands": settings.LOG_COMMANDS,
        "messages": settings.LOG_MESSAGES,
        "verbose": settings.VERBOSE_LOGGING,
    }
