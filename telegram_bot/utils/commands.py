"""
–£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞
"""

import asyncio
from aiogram import Bot
from aiogram.types import BotCommand
import logging

logger = logging.getLogger(__name__)


def _get_settings():
    """–û—Ç—Ä–∏–º—É—î–º–æ settings –±–µ–∑ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É"""
    from telegram_bot.config import settings

    return settings


async def clear_bot_commands(bot: Bot):
    """–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        await bot.set_my_commands([])
        logger.info("‚úÖ –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –æ—á–∏—â–µ–Ω–æ –∑ –º–µ–Ω—é –±–æ—Ç–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")
        return False


async def set_bot_commands(bot: Bot):
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
        BotCommand(command="redis", description="üî¥ –°—Ç–∞—Ç—É—Å Redis & –õ–æ–≥—É–≤–∞–Ω–Ω—è"),
    ]

    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        current_commands = await bot.get_my_commands()
        for cmd in current_commands:
            logger.info(f"üìå /{cmd.command} - {cmd.description}")
        return True

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")
        return False


async def get_current_commands(bot: Bot):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞"""
    try:
        current_commands = await bot.get_my_commands()
        logger.info("üìã –ü–æ—Ç–æ—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:")

        if not current_commands:
            logger.info("   (–ù–µ–º–∞—î –∫–æ–º–∞–Ω–¥)")
        else:
            for cmd in current_commands:
                logger.info(f"   /{cmd.command} - {cmd.description}")

        return current_commands

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")
        return []


async def setup_bot_commands():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    settings = _get_settings()
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)

    try:
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –∫–æ–º–∞–Ω–¥–∏
        await clear_bot_commands(bot)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—ñ
        await set_bot_commands(bot)

    finally:
        await bot.session.close()


if __name__ == "__main__":
    # –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ —è–∫ –æ–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç
    logging.basicConfig(
        level=logging.INFO, format="[%(asctime)s] %(levelname)s: %(message)s"
    )

    asyncio.run(setup_bot_commands())
