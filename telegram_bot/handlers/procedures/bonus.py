"""
Telegram bot handlers for bonus operations
"""

from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.orm import Session
from datetime import datetime
import logging

from src.core.database.connection import get_db
from src.features.telegram_bot.schemas import (
    get_telegram_user,
    create_or_update_telegram_user,
    get_user_bonus_balance,
    get_user_bonus_history,
    add_bonus_to_user,
    create_or_get_bonus_account
)

logger = logging.getLogger(__name__)


class BonusStates(StatesGroup):
    waiting_for_phone = State()


async def cmd_bonus_balance(message: types.Message, session: Session = None):
    """Show user's bonus balance"""
    if not session:
        session = next(get_db())

    try:
        user_id = message.from_user.id

        # Find user using schema
        user = get_telegram_user(session, user_id)

        if not user:
            await message.answer(
                "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø–æ—á–∞—Ç–∫—É –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ–º–∞–Ω–¥–æ—é /register"
            )
            return

        # Get bonus balance using schema
        balance = get_user_bonus_balance(session, user_id)

        if balance == 0:
            # Check if account exists, if not create it
            bonus_account = create_or_get_bonus_account(session, user_id)

        # Get recent transactions using schema
        recent_transactions = get_user_bonus_history(session, user_id, limit=5)

        # Format response
        response = f"üí∞ **–í–∞—à –±–æ–Ω—É—Å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance:.1f} –±–æ–Ω—É—Å—ñ–≤**\n\n"

        if recent_transactions:
            response += "üìã –û—Å—Ç–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:\n"
            for trans in recent_transactions:
                date_str = trans['created_at'].strftime("%d.%m.%Y %H:%M")
                amount_str = f"+{trans['amount']}" if trans['amount'] > 0 else str(trans['amount'])
                response += f"‚Ä¢ {date_str}: {amount_str} ({trans['description']})\n"
        else:
            response += "üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in bonus balance command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_bonus_history(message: types.Message, session: Session = None):
    """Show user's bonus history"""
    if not session:
        session = next(get_db())

    try:
        user_id = message.from_user.id

        # Get all bonus transactions using schema
        transactions = get_user_bonus_history(session, user_id, limit=20)

        if not transactions:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")
            return

        response = "üìä **–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π:**\n\n"

        total_earned = 0
        total_spent = 0

        for trans in transactions:
            date_str = trans['created_at'].strftime("%d.%m.%Y %H:%M")
            amount_str = f"+{trans['amount']}" if trans['amount'] > 0 else str(trans['amount'])

            if trans['amount'] > 0:
                total_earned += trans['amount']
                emoji = "üíö"
            else:
                total_spent += abs(trans['amount'])
                emoji = "üí∏"

            response += f"{emoji} {date_str}: {amount_str}\n"
            response += f"   _{trans['description']}_\n\n"

        response += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –ó–∞—Ä–æ–±–ª–µ–Ω–æ: {total_earned} –±–æ–Ω—É—Å—ñ–≤\n"
        response += f"‚Ä¢ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_spent} –±–æ–Ω—É—Å—ñ–≤\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in bonus history command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_register_phone(message: types.Message, state: FSMContext):
    """Register user phone for bonus system"""
    await message.answer(
        "üì± –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –±–æ–Ω—É—Å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(BonusStates.waiting_for_phone)


async def process_contact(message: types.Message, state: FSMContext, session: Session = None):
    """Process shared contact"""
    if not session:
        session = next(get_db())

    try:
        if not message.contact:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        user_id = message.from_user.id
        phone = message.contact.phone_number

        # Clean phone number
        phone = phone.replace("+", "").replace("-", "").replace(" ", "")

        # Create or update user using schema
        user = create_or_update_telegram_user(
            session,
            telegram_user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            phone=phone
        )

        # Create or get bonus account using schema
        bonus_account = create_or_get_bonus_account(session, user_id)
        balance = get_user_bonus_balance(session, user_id)

        await message.answer(
            f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone} —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!\n"
            f"üí∞ –í–∞—à –±–æ–Ω—É—Å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance:.1f} –±–æ–Ω—É—Å—ñ–≤\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏ –∑–∞ –ø–æ–∫—É–ø–∫–∏!",
            reply_markup=types.ReplyKeyboardRemove()
        )

        await state.clear()

    except Exception as e:
        logger.error(f"Error processing contact: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_bonus_info(message: types.Message):
    """Show bonus program information"""
    info_text = """
üéÅ **–ë–æ–Ω—É—Å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞**

üí∞ **–Ø–∫ –ø—Ä–∞—Ü—é—î:**
‚Ä¢ –ó–∞ –∫–æ–∂–Ω—É –ø–æ–∫—É–ø–∫—É –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –±–æ–Ω—É—Å–∏
‚Ä¢ 1 –≥—Ä–∏–≤–Ω—è = 1 –±–æ–Ω—É—Å
‚Ä¢ –ë–æ–Ω—É—Å–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏

üì± **–ö–æ–º–∞–Ω–¥–∏:**
‚Ä¢ /bonus - –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å—ñ–≤
‚Ä¢ /bonus_history - —ñ—Å—Ç–æ—Ä—ñ—è –æ–ø–µ—Ä–∞—Ü—ñ–π
‚Ä¢ /purchases - —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫
‚Ä¢ /register - —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É

üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ë–æ–Ω—É—Å–∏ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–∞—Ö –≤ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.
"""

    await message.answer(info_text, parse_mode="Markdown")


# Register handlers
def register_bonus_handlers(dp):
    """Register bonus-related handlers"""
    dp.message.register(cmd_bonus_balance, Command("bonus"))
    dp.message.register(cmd_bonus_history, Command("bonus_history"))
    dp.message.register(cmd_register_phone, Command("register"))
    dp.message.register(cmd_bonus_info, Command("bonus_info"))
    dp.message.register(process_contact, F.contact, BonusStates.waiting_for_phone)
