"""
Telegram bot handlers for purchase history
"""

from aiogram import types
from aiogram.filters.command import Command
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import desc, and_
from datetime import datetime, timedelta
import logging

from src.core.database.connection import get_db
from src.features.telegram_bot.schemas import (
    get_telegram_user,
    get_user_receipts,
    get_receipt_details,
    get_monthly_receipts_stats,
    get_user_purchase_history,
)

logger = logging.getLogger(__name__)


async def cmd_purchase_history(message: types.Message, session: Session = None):
    """Show user's purchase history"""
    if not session:
        session = next(get_db())

    try:
        user_id = message.from_user.id

        # Find user using schema
        user = get_telegram_user(session, user_id)

        if not user:
            await message.answer(
                "‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /register"
            )
            return

        # Get user receipts using schema
        receipts = get_user_receipts(session, user_id, limit=10)

        if not receipts:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫")
            return

        response = "üõçÔ∏è **–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:**\n\n"

        total_spent = 0
        total_bonuses = 0

        for receipt in receipts:
            date_str = (
                receipt["date_created"].strftime("%d.%m.%Y %H:%M")
                if receipt["date_created"]
                else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            )
            store_name = receipt["store_name"] or "–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω"

            response += f"üè™ **{store_name}**\n"
            response += f"üìÖ {date_str}\n"
            response += f"üí∞ –°—É–º–∞: {receipt['total_amount']} –≥—Ä–Ω\n"
            response += f"üí∏ –ó–Ω–∏–∂–∫–∞: {receipt['discount']} –≥—Ä–Ω\n"
            response += f"üßæ –ß–µ–∫: #{receipt['receipt_number']}\n\n"

            total_spent += float(receipt["total_amount"])
            # –ë–æ–Ω—É—Å–∏ –º–æ–∂–µ–º–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —è–∫ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —Å—É–º–∏
            bonus_amount = int(float(receipt["total_amount"]) * 0.01)  # 1% –≤—ñ–¥ —Å—É–º–∏
            total_bonuses += bonus_amount

        response += f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:.2f} –≥—Ä–Ω\n"
        response += f"‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonuses}\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in purchase history command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_receipt_details(message: types.Message, session: Session = None):
    """Show details of specific receipt"""
    if not session:
        session = next(get_db())

    try:
        # Extract receipt number from command
        command_parts = message.text.split()
        if len(command_parts) < 2:
            await message.answer(
                "üìã –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /receipt <–Ω–æ–º–µ—Ä_—á–µ–∫–∞>\n–ü—Ä–∏–∫–ª–∞–¥: /receipt 12345"
            )
            return

        transaction_id = command_parts[1]
        user_id = message.from_user.id

        # Find user
        user = session.query(Client).filter(Client.telegram_user_id == user_id).first()

        if not user:
            await message.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ")
            return

        # Find transaction
        transaction = (
            session.query(Transaction)
            .filter(
                and_(
                    Transaction.client_phone == user.phone,
                    Transaction.transaction_id == int(transaction_id),
                )
            )
            .first()
        )

        if not transaction:
            await message.answer(f"‚ùå –ß–µ–∫ #{transaction_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        # Format transaction details
        date_str = (
            transaction.date_close.strftime("%d.%m.%Y %H:%M")
            if transaction.date_close
            else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        )
        store_name = transaction.spot_name or f"–¢–æ—á–∫–∞ {transaction.spot_id}"

        response = f"üßæ **–ß–µ–∫ #{transaction.transaction_id}**\n\n"
        response += f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {store_name}\n"
        response += f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        response += f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {transaction.sum} –≥—Ä–Ω\n"
        response += f"üí∏ –ó–Ω–∏–∂–∫–∞: {transaction.discount} –≥—Ä–Ω\n"
        response += f"üéÅ –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {transaction.bonus}\n\n"

        # Get transaction products
        products = (
            session.query(TransactionProduct)
            .filter(TransactionProduct.transaction_id == transaction.transaction_id)
            .all()
        )

        if products:
            response += "üì¶ **–¢–æ–≤–∞—Ä–∏:**\n"
            for product in products:
                response += f"‚Ä¢ {product.product_name}\n"
                response += f"  {product.count} x {product.price} = {product.sum} –≥—Ä–Ω\n"
        else:
            response += "üì¶ –î–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in receipt details command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —á–µ–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_monthly_stats(message: types.Message, session: Session = None):
    """Show monthly purchase statistics"""
    if not session:
        session = next(get_db())

    try:
        user_id = message.from_user.id

        # Find user
        user = session.query(Client).filter(Client.telegram_user_id == user_id).first()

        if not user:
            await message.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ")
            return

        # Get transactions for current month
        start_of_month = datetime.now().replace(
            day=1, hour=0, minute=0, second=0, microsecond=0
        )

        transactions = (
            session.query(Transaction)
            .filter(
                and_(
                    Transaction.client_phone == user.phone,
                    Transaction.date_close >= start_of_month,
                )
            )
            .all()
        )

        if not transactions:
            await message.answer("üìÖ –£ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ —â–µ –Ω–µ–º–∞—î –ø–æ–∫—É–ø–æ–∫")
            return

        # Calculate statistics
        total_amount = sum(float(t.sum) for t in transactions)
        total_bonuses = sum(t.bonus for t in transactions)
        purchase_count = len(transactions)
        average_check = total_amount / purchase_count if purchase_count > 0 else 0

        # Get store statistics
        store_stats = {}
        for transaction in transactions:
            store_name = transaction.spot_name or f"–¢–æ—á–∫–∞ {transaction.spot_id}"
            if store_name not in store_stats:
                store_stats[store_name] = {"count": 0, "amount": 0}
            store_stats[store_name]["count"] += 1
            store_stats[store_name]["amount"] += float(transaction.sum)

        month_name = start_of_month.strftime("%B %Y")

        response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name}:**\n\n"
        response += f"üõçÔ∏è –ü–æ–∫—É–ø–æ–∫: {purchase_count}\n"
        response += f"üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_amount:.2f} –≥—Ä–Ω\n"
        response += f"üéÅ –û—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å—ñ–≤: {total_bonuses}\n"
        response += f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {average_check:.2f} –≥—Ä–Ω\n\n"

        if store_stats:
            response += "üè™ **–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:**\n"
            for store_name, stats in store_stats.items():
                response += f"‚Ä¢ {store_name}: {stats['count']} –ø–æ–∫—É–ø–æ–∫, {stats['amount']:.2f} –≥—Ä–Ω\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in monthly stats command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    finally:
        session.close()


async def cmd_favorite_products(message: types.Message, session: Session = None):
    """Show user's most purchased products"""
    if not session:
        session = next(get_db())

    try:
        user_id = message.from_user.id

        # Find user
        user = session.query(Client).filter(Client.telegram_user_id == user_id).first()

        if not user:
            await message.answer("‚ùå –í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ")
            return

        # Get popular products from user's transactions
        from sqlalchemy import func

        popular_products = (
            session.query(
                TransactionProduct.product_name,
                func.count(TransactionProduct.id).label("purchase_count"),
                func.sum(TransactionProduct.sum).label("total_spent"),
                func.sum(TransactionProduct.count).label("total_quantity"),
            )
            .join(
                Transaction,
                TransactionProduct.transaction_id == Transaction.transaction_id,
            )
            .filter(Transaction.client_phone == user.phone)
            .group_by(TransactionProduct.product_name)
            .order_by(desc("purchase_count"))
            .limit(10)
            .all()
        )

        if not popular_products:
            await message.answer("üì≠ –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏")
            return

        response = "‚≠ê **–í–∞—à—ñ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ —Ç–æ–≤–∞—Ä–∏:**\n\n"

        for i, product in enumerate(popular_products, 1):
            response += f"{i}. **{product.product_name}**\n"
            response += f"   –ö—É–ø–ª–µ–Ω–æ: {product.purchase_count} —Ä–∞–∑—ñ–≤\n"
            response += f"   –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {float(product.total_spent):.2f} –≥—Ä–Ω\n"
            response += f"   –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {float(product.total_quantity):.1f}\n\n"

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"Error in favorite products command: {e}")
        await message.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
    finally:
        session.close()


# Register handlers
def register_history_handlers(dp):
    """Register history-related handlers"""
    dp.message.register(cmd_purchase_history, Command("purchases"))
    dp.message.register(cmd_receipt_details, Command("receipt"))
    dp.message.register(cmd_monthly_stats, Command("stats"))
    dp.message.register(cmd_favorite_products, Command("favorites"))
