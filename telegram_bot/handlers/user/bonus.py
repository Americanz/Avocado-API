import logging
from aiogram.types import Message
from telegram_bot.handlers.common.dispatcher import dispatch_button_handler
from telegram_bot.navigation.decorators import button_handler
from telegram_bot.data.bot_texts import get_text

logger = logging.getLogger("telegram_bot.user")


@button_handler
async def view_bonus_history(message: Message):
    """–ü–µ—Ä–µ–≥–ª—è–¥ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    logger.info(f"view_bonus_history –≤—ñ–¥ {user_id}")

    from telegram_bot.services.bonus_service_universal import get_bonus_service

    try:
        bonus_service = get_bonus_service()

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
        user_data = await bonus_service.get_user_by_id(user_id)

        if user_data:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é —è–∫ –≤ check_client_bonus.py
            history = await bonus_service.get_user_history(user_id, limit=5)

            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(history) > 4000:
                parts = []
                lines = history.split('\n')
                current_part = ""

                for line in lines:
                    if len(current_part + line + '\n') > 4000:
                        parts.append(current_part)
                        current_part = line + '\n'
                    else:
                        current_part += line + '\n'

                if current_part:
                    parts.append(current_part)

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏
                for i, part in enumerate(parts):
                    if i == 0:
                        await message.answer(part, parse_mode="HTML")
                    else:
                        await message.answer(f"üìÑ <b>–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...</b>\n\n{part}", parse_mode="HTML")
            else:
                await message.answer(history, parse_mode="HTML")
        else:
            await message.answer(
                "ÔøΩ <b>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
                "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤ –≤–≤–µ–¥—ñ—Ç—å:\n"
                "‚Ä¢ ID –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13763)\n"
                "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                "‚Ä¢ –Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: <code>/history 13763</code>",
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤")


@button_handler
async def view_balance(message: Message):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    logger.info(f"view_balance –≤—ñ–¥ {user_id}")

    from telegram_bot.services.bonus_service_universal import get_bonus_service

    try:
        bonus_service = get_bonus_service()

        # –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ telegram user_id (—è–∫—â–æ —î –ø—Ä–∏–≤'—è–∑–∫–∞)
        # –ê–±–æ –ø—Ä–æ—Å–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É

        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
        user_data = await bonus_service.get_user_by_id(user_id)

        if user_data:
            balance = await bonus_service.get_user_balance(user_id)
            if balance is not None:
                if balance == 0:
                    text = get_text("balance_zero") or f"üòÖ –£ –∫–ª—ñ—î–Ω—Ç–∞ #{user_id} –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –±–æ–Ω—É—Å—ñ–≤"
                else:
                    text = get_text("balance_beauty") or f"‚ú® –ë–∞–ª–∞–Ω—Å –∫–ª—ñ—î–Ω—Ç–∞ #{user_id}: <b>{balance:.2f}</b> –≥—Ä–Ω"
                await message.answer(text, parse_mode="HTML")
            else:
                await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å")
        else:
            # –ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π - –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω
            await message.answer(
                "üîç <b>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
                "–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–æ–Ω—É—Å—ñ–≤ –≤–≤–µ–¥—ñ—Ç—å:\n"
                "‚Ä¢ ID –∫–ª—ñ—î–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 13763)\n"
                "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
                "‚Ä¢ –Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞\n\n"
                "–ü—Ä–∏–∫–ª–∞–¥: <code>/bonus 13763</code>",
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É")
