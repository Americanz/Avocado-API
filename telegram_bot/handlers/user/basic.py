import logging
from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from telegram_bot.middlewares.db import DBSessionMiddleware
from telegram_bot.services import *
from telegram_bot.utils import *
from telegram_bot.data import *

from telegram_bot.handlers.common.dispatcher import dispatch_button_handler
from telegram_bot.handlers.common.permissions import is_admin
from aiogram.utils.markdown import hbold
from telegram_bot.data.keyboards import get_keyboard
from telegram_bot.data.bot_texts import get_text
from telegram_bot.config.redis import cache_user_data, get_cached_user_data
from telegram_bot.utils.logging import log_command, log_button_click, log_message

from telegram_bot.states.phone_state import PhoneState
from telegram_bot.navigation.decorators import button_handler
from telegram_bot.services.bonus_service_universal import get_bonus_service


def register_user_handlers(dp, menu_manager=None):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    logger = logging.getLogger("telegram_bot.user")
    dp.message.middleware(DBSessionMiddleware())

    @dp.message(CommandStart())
    async def start(message: Message):
        log_command(message, "/start")
        user_id = message.from_user.id
        username = message.from_user.username

        # –ö–µ—à—É—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Redis
        user_info = {
            "user_id": user_id,
            "username": username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "last_activity": message.date.isoformat(),
        }
        cache_user_data(user_id, user_info, expire_seconds=3600)  # –ö–µ—à –Ω–∞ 1 –≥–æ–¥–∏–Ω—É

        navigation = dp.get("menu_manager")
        
        # –ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        bonus_service = get_bonus_service()
        user = await bonus_service.get_user_by_telegram_id(user_id)
        
        has_phone = user and user.get("phone")
        phone = user.get("phone") if user else None
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —Å—Ç–∞–Ω—É
        PhoneState.set(user_id, bool(has_phone))

        if not has_phone:
            try:
                bonus_service = get_bonus_service()
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ clients
                await bonus_service.upsert_user(
                    user_id,
                    username,
                    first_name=message.from_user.first_name,
                    last_name=message.from_user.last_name,
                    language_code=message.from_user.language_code,
                )
                logger.info(
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ({username}) –¥–æ–¥–∞–Ω–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—ñ clients"
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ clients: {e}")
            from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]
                ],
                resize_keyboard=True,
                one_time_keyboard=True,
            )
            await message.answer(
                get_text("share_phone_prompt")
                or "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:",
                reply_markup=keyboard,
            )
            return

        # –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

        is_admin_user = is_admin(user_id)
        keyboard_buttons = []
        for btn in get_keyboard("main"):
            if btn["enabled"]:
                keyboard_buttons.append([KeyboardButton(text=btn["text"])])

        if is_admin_user:
            for btn in get_keyboard("admin"):
                if btn["enabled"]:
                    keyboard_buttons.append([KeyboardButton(text=btn["text"])])

        keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å "welcome_registered" –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–ª—É—Ç–∞–Ω–∏–Ω–∏
        welcome_text = get_text("welcome") or f"–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
        if phone:
            welcome_text += f"\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"

        await message.answer(
            welcome_text,
            reply_markup=keyboard,
        )

    @dp.message()
    async def echo(message: Message, state: FSMContext = None):
        """–û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        user_id = message.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FSM —Å—Ç–∞–Ω—É - —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å—Ç–∞–Ω—ñ FSM, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
        if state:
            current_state = await state.get_state()
            if current_state:
                # FSM –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –æ–±—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        if message.contact:
            from telegram_bot.handlers.common.share_phone import handle_phone_share

            await handle_phone_share(message)
            return

        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
        keyboard_buttons = get_keyboard("main")
        if is_admin(user_id):
            keyboard_buttons += get_keyboard("admin")

        for btn in keyboard_buttons:
            if btn["enabled"] and btn["text"] == message.text and btn.get("handler"):
                handler_name = btn["handler"]
                try:
                    log_button_click(message, btn["text"], handler_name)
                    await dispatch_button_handler(handler_name, message)
                    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                    try:
                        await message.delete()
                    except:
                        pass
                    return
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏ {handler_name}: {e}")
                    await message.answer(
                        get_text("button_error")
                        or "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏."
                    )
                    return

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        log_message(message)
        await message.answer(
            get_text("unknown_command")
            or "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        )

    @dp.message(F.text == "/redis")
    async def cmd_redis_status(message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É Redis"""
        log_command(message, "/redis")
        from telegram_bot.config.redis import is_redis_available, get_cached_user_data
        from telegram_bot.utils.logging import get_logging_status

        user_id = message.from_user.id

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Redis
        redis_status = "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ" if is_redis_available() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cached_data = get_cached_user_data(user_id)
        cache_info = "‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ" if cached_data else "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –ª–æ–≥—É–≤–∞–Ω–Ω—è
        log_status = get_logging_status()
        log_info = []
        log_info.append(
            f"üìã –î—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {'‚úÖ' if log_status['user_actions'] else '‚ùå'}"
        )
        log_info.append(f"üîò –ö–Ω–æ–ø–∫–∏: {'‚úÖ' if log_status['button_clicks'] else '‚ùå'}")
        log_info.append(f"üîß –ö–æ–º–∞–Ω–¥–∏: {'‚úÖ' if log_status['commands'] else '‚ùå'}")
        log_info.append(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {'‚úÖ' if log_status['messages'] else '‚ùå'}")
        log_info.append(f"üîç –î–µ—Ç–∞–ª—å–Ω–µ: {'‚úÖ' if log_status['verbose'] else '‚ùå'}")

        response = f"""üî¥ **Redis & –õ–æ–≥—É–≤–∞–Ω–Ω—è**

**Redis:** {redis_status}
**–ö–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:** {cache_info}

**–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è:**
{chr(10).join(log_info)}

**–ö–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ:**
```json
{cached_data if cached_data else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"}
```"""

        await message.answer(response, parse_mode="Markdown")
