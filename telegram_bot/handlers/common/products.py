import logging
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telegram_bot.handlers.common.dispatcher import register_button_handler
from telegram_bot.services.bonus_service_universal import get_bonus_service
from telegram_bot.data.bot_texts import get_text


@register_button_handler("show_products")
async def show_products_catalog(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤"""
    logger = logging.getLogger("telegram_bot.handlers.products")
    user_id = message.from_user.id
    logger.info(f"show_products –¥–ª—è user_id={user_id}")
    
    try:
        bonus_service = get_bonus_service()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–æ–≤–∞—Ä—ñ–≤
        categories = await bonus_service.get_product_categories()
        
        if not categories:
            await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for category in categories:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"üì¶ {category}",
                    callback_data=f"category:{category}"
                )
            ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ù§Ô∏è –ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏",
                callback_data="show_favorites"
            )
        ])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="üõí –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫",
                callback_data="show_purchase_history"
            )
        ])
        
        await message.answer(
            "üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä—ñ–≤</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É: {e}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫–∞—Ç–∞–ª–æ–≥—É: {str(e)}")


@register_button_handler("show_favorites")
async def show_user_favorites(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    logger = logging.getLogger("telegram_bot.handlers.products")
    user_id = message.from_user.id
    logger.info(f"show_favorites –¥–ª—è user_id={user_id}")
    
    try:
        bonus_service = get_bonus_service()
        favorites = await bonus_service.get_user_favorites(user_id)
        
        if not favorites:
            await message.answer(
                "‚ù§Ô∏è <b>–£–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤.\n"
                "–î–æ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å –ø–æ–∫—É–ø–æ–∫!",
                parse_mode="HTML"
            )
            return
        
        text = "‚ù§Ô∏è <b>–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</b>\n\n"
        
        for i, item in enumerate(favorites, 1):
            text += f"{i}. <b>{item['name']}</b>\n"
            if item.get('brand'):
                text += f"   üè∑Ô∏è {item['brand']}\n"
            text += f"   üì¶ {item['category']}\n"
            if item.get('base_price'):
                text += f"   üí∞ {item['base_price']:.2f} –≥—Ä–Ω\n"
            if item.get('notes'):
                text += f"   üìù {item['notes']}\n"
            text += "\n"
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É–ª—é–±–ª–µ–Ω–∏—Ö: {e}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É–ª—é–±–ª–µ–Ω–∏—Ö: {str(e)}")


@register_button_handler("show_purchase_history")  
async def show_purchase_history(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫—É–ø–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    logger = logging.getLogger("telegram_bot.handlers.products")
    user_id = message.from_user.id
    logger.info(f"show_purchase_history –¥–ª—è user_id={user_id}")
    
    try:
        bonus_service = get_bonus_service()
        history = await bonus_service.get_purchase_history(user_id, limit=20)
        
        if not history:
            await message.answer(
                "üõí <b>–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫—É–ø–æ–∫</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫.",
                parse_mode="HTML"
            )
            return
        
        text = "üõí <b>–í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏:</b>\n\n"
        
        current_receipt = None
        for item in history:
            # –ì—Ä—É–ø—É—î–º–æ –ø–æ —á–µ–∫–∞—Ö
            if current_receipt != item.get('receipt_id'):
                current_receipt = item.get('receipt_id')
                if item.get('receipt_number'):
                    text += f"üßæ <b>–ß–µ–∫ #{item['receipt_number']}</b>\n"
                if item.get('store_name'):
                    text += f"üè™ {item['store_name']}\n"
                text += f"üìÖ {item['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
            
            # –¢–æ–≤–∞—Ä
            text += f"   ‚Ä¢ <b>{item['product_name']}</b>\n"
            text += f"     –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item['quantity']}\n"
            text += f"     –¶—ñ–Ω–∞: {item['unit_price']:.2f} –≥—Ä–Ω\n"
            text += f"     –ë–æ–Ω—É—Å–∏: +{item['bonus_earned']}\n\n"
            
            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(text) > 3500:
                text += "...\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–∫—É–ø–∫–∏</i>"
                break
        
        await message.answer(text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫: {e}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫—É–ø–æ–∫: {str(e)}")
