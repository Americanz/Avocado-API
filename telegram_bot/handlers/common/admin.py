import logging
from decimal import Decimal
from aiogram import types
from aiogram.types import Message
from telegram_bot.handlers.common.dispatcher import register_button_handler
from telegram_bot.services.bonus_service_universal import get_bonus_service
from telegram_bot.data.bot_texts import get_text
from telegram_bot.data.keyboards import get_keyboard
from telegram_bot.utils.datetime_helpers import format_date


@register_button_handler("admin_panel")
async def admin_panel(message: Message):
    logger = logging.getLogger("telegram_bot.handlers.admin")
    user_id = message.from_user.id
    logger.info(f"admin_panel –¥–ª—è user_id={user_id}")
    try:
        bonus_service = get_bonus_service()
        if not bonus_service.table_exists("clients"):
            text = (
                get_text("admin_table_missing")
                or "–¢–∞–±–ª–∏—Ü—è clients –Ω–µ —ñ—Å–Ω—É—î –≤ PostgreSQL!"
            )
            await message.answer(text, parse_mode="HTML")
            return
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = (
            get_text("admin_panel")
            or "–í–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:"
        )

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ keyboard builder –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è
        from telegram_bot.keyboards.builder import build_admin_keyboard

        admin_buttons = get_keyboard("admin")
        keyboard = build_admin_keyboard(admin_buttons)

        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )
        return
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ admin_panel: {e}")
        await message.answer(str(e))


@register_button_handler("admin_stats")
async def admin_stats(message: Message):
    logger = logging.getLogger("telegram_bot.handlers.admin")
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(15)

        users_count = len(recent_users) if recent_users else 0
        phone_count = (
            sum(1 for user in recent_users if user.get("phone")) if recent_users else 0
        )

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        from decimal import Decimal
        total_balance = sum(Decimal(str(user.get("bonus", 0))) for user in recent_users) if recent_users else Decimal('0')
        total_balance_grn = float(total_balance) / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ {users_count}):</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö: {users_count}
‚Ä¢ –ó –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_count}
‚Ä¢ –ë–µ–∑ –Ω–æ–º–µ—Ä—ñ–≤: {users_count - phone_count}

üí∞ <b>–ë–æ–Ω—É—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance_grn:.2f} –≥—Ä–Ω
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å: {(total_balance_grn/users_count) if users_count > 0 else 0:.2f} –≥—Ä–Ω

üìà <b>–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó:</b>
‚Ä¢ {(phone_count/users_count*100) if users_count > 0 else 0:.1f}% –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–¥—ñ–ª–∏–ª–∏—Å—è –Ω–æ–º–µ—Ä–æ–º

üìã <b>–î–µ—Ç–∞–ª—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>
"""

        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        for i, user in enumerate(recent_users[:5], 1):
            name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            phone = user.get("phone", "‚ùå")
            balance = (float(Decimal(str(user.get("bonus", 0)))) / 100.0) if user.get("bonus") else 0.0
            telegram_id = user.get("telegram_user_id", "N/A")
            
            stats_text += f"\n{i}. <b>{name}</b>"
            if len(name) > 25:
                stats_text += f"\n   üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω"
                stats_text += f"\n   üÜî TG: {telegram_id}"
            else:
                stats_text += f"\n   üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω | üÜî {telegram_id}"

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        stats_text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

    # –°—Ç–≤–æ—Ä—é—î–º–æ inline keyboard –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_stats_refresh"),
            InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—ñ", callback_data="admin_stats_details")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_back_to_panel_inline")
        ]
    ])

    await message.answer(
        stats_text,
        parse_mode="HTML",
        reply_markup=inline_keyboard,
    )


@register_button_handler("admin_bonuses")
async def admin_bonuses(message: Message):
    logger = logging.getLogger("telegram_bot.handlers.admin")

    try:  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –±–æ–Ω—É—Å–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(5)

        bonuses_text = "üí∞ <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–∞–º–∏:</b>\n\n"

        if recent_users:
            bonuses_text += "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏:</b>\n"
            total_balance = 0
            active_users = 0

            for user in recent_users:
                user_id = user.get("client_id", "N/A")
                balance = user.get("bonus", 0)
                name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                if balance and balance > 0:
                    active_users += 1
                    total_balance += balance
                    balance_grn = float(balance) / 100.0  # –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫
                    bonuses_text += f"‚Ä¢ {name} (ID: {user_id}): {balance_grn:.2f} –≥—Ä–Ω\n"
        else:
            bonuses_text += "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î\n"
            total_balance = 0
            active_users = 0

        bonuses_text += f"\nüíé <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –±–∞–ª–∞–Ω—Å—ñ–≤:</b> {float(total_balance) / 100.0:.2f} –≥—Ä–Ω\n"
        bonuses_text += f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å–æ–º > 0:</b> {active_users}\n"
        bonuses_text += "\nüîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n‚Ä¢ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏\n‚Ä¢ –°–ø–∏—Å–∞—Ç–∏ –±–æ–Ω—É—Å–∏\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é"

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –±–æ–Ω—É—Å–∏: {e}")
        bonuses_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –±–æ–Ω—É—Å–∏"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–∞–º–∏
    bonus_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏"),
                types.KeyboardButton(text="–°–ø–∏—Å–∞—Ç–∏ –±–æ–Ω—É—Å–∏"),
            ],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é")],
            [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")],
        ],
        resize_keyboard=True,
    )

    await message.answer(
        bonuses_text,
        parse_mode="HTML",
        reply_markup=bonus_keyboard,
    )


@register_button_handler("admin_users")
async def admin_users(message: Message):
    logger = logging.getLogger("telegram_bot.handlers.admin")
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-—Å–µ—Ä–≤—ñ—Å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(10)

        users_text = "üë• <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:</b>\n\n"

        if recent_users:
            users_text += "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
            for user in recent_users:
                user_id = user.get("user_id", "N/A")
                username = user.get("username", "–ë–µ–∑ —ñ–º–µ–Ω—ñ")
                phone = user.get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                created_at = format_date(user.get("created_at", ""))

                phone_status = "üì±" if phone != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else "‚ùå"
                users_text += (
                    f"‚Ä¢ {phone_status} {user_id} (@{username}) - {created_at}\n"
                )
        else:
            users_text += "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î\n"

        users_text += "\nüîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n‚Ä¢ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏\n‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        users_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"

    await message.answer(
        users_text,
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
            resize_keyboard=True,
        ),
    )


@register_button_handler("admin_back")
async def admin_back(message: Message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    user_id = message.from_user.id
    logger.info(f"admin_back –¥–ª—è user_id={user_id}")

    from telegram_bot.data.keyboards import get_keyboard
    from aiogram import types
    from telegram_bot.data.bot_texts import get_text
    from telegram_bot.handlers.common.permissions import is_admin
    from telegram_bot.states.phone_state import PhoneState

    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é: —Ç—ñ–ª—å–∫–∏ main + (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"
    keyboard_buttons = get_keyboard("main")
    if is_admin(user_id):
        admin_buttons = [
            btn for btn in get_keyboard("admin") if btn["handler"] == "admin_panel"
        ]
        keyboard_buttons += admin_buttons

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Ç–µ–ª–µ—Ñ–æ–Ω—É
    has_phone = PhoneState.get(user_id)
    if not has_phone:
        # –Ø–∫—â–æ –≤ –∫–µ—à—ñ –Ω–µ–º–∞—î ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É –ë–î
        bonus_service = get_bonus_service()
        user = await bonus_service.get_user_by_id(user_id)
        if user and user.get("phone"):
            PhoneState.set(user_id, True)
            has_phone = True
        else:
            PhoneState.set(user_id, False)

    # –Ø–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∂–µ —î ‚Äî –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º"
    if has_phone:
        keyboard_buttons = [
            btn for btn in keyboard_buttons if btn["text"] != "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º"
        ]

    buttons = [
        [
            types.KeyboardButton(text=btn["text"])
            for btn in keyboard_buttons
            if btn["enabled"]
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–Ω–æ–ø–∫–∞ –º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä silent
    admin_buttons_config = get_keyboard("admin")
    button_config = next(
        (btn for btn in admin_buttons_config if btn["handler"] == "admin_back"), None
    )

    if button_config and button_config.get("silent", False):
        # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–º—ñ–Ω–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        try:
            await message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        except:
            pass
        await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard)  # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
    else:
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º - –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await message.answer(
            get_text("can_use_bot") or "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º:",
            reply_markup=keyboard,
        )


@register_button_handler("admin_back_to_panel")
async def admin_back_to_panel(message: Message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ –ø—ñ–¥–º–µ–Ω—é –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    user_id = message.from_user.id
    logger.info(f"admin_back_to_panel –¥–ª—è user_id={user_id}")

    # –§–æ—Ä–º—É—î–º–æ –∞–¥–º—ñ–Ω-–∫–Ω–æ–ø–∫–∏
    admin_menu_buttons = [
        [
            types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            types.KeyboardButton(text="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–∞–º–∏"),
            types.KeyboardButton(text="–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"),
        ],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=admin_menu_buttons, resize_keyboard=True
    )

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–Ω–æ–ø–∫–∞ –º–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä silent
    admin_buttons_config = get_keyboard("admin")
    button_config = next(
        (
            btn
            for btn in admin_buttons_config
            if btn["handler"] == "admin_back_to_panel"
        ),
        None,
    )

    if button_config and button_config.get("silent", False):
        # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –Ω–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        try:
            await message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        except:
            pass
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç –∑ –Ω–æ–≤–æ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        await message.answer("–ù–∞–∑–∞–¥", reply_markup=keyboard)  # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ–∫—Å—Ç
    else:
        # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º - –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        text = (
            get_text("admin_panel")
            or "–í–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:"
        )
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
        )


# Callback handlers –¥–ª—è inline keyboard
from aiogram.types import CallbackQuery
from telegram_bot.handlers.common.dispatcher import register_callback_handler

@register_callback_handler("admin_stats_refresh")
async def admin_stats_refresh_callback(callback: CallbackQuery):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_stats_refresh –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(15)

        users_count = len(recent_users) if recent_users else 0
        phone_count = (
            sum(1 for user in recent_users if user.get("phone")) if recent_users else 0
        )

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
        from decimal import Decimal
        total_balance = sum(Decimal(str(user.get("bonus", 0))) for user in recent_users) if recent_users else Decimal('0')
        total_balance_grn = float(total_balance) / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ

        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–æ—Å—Ç–∞–Ω–Ω—ñ {users_count}):</b>
‚Ä¢ –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö: {users_count}
‚Ä¢ –ó –Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_count}
‚Ä¢ –ë–µ–∑ –Ω–æ–º–µ—Ä—ñ–≤: {users_count - phone_count}

üí∞ <b>–ë–æ–Ω—É—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {total_balance_grn:.2f} –≥—Ä–Ω
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å: {(total_balance_grn/users_count) if users_count > 0 else 0:.2f} –≥—Ä–Ω

üìà <b>–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó:</b>
‚Ä¢ {(phone_count/users_count*100) if users_count > 0 else 0:.1f}% –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–¥—ñ–ª–∏–ª–∏—Å—è –Ω–æ–º–µ—Ä–æ–º

üìã <b>–î–µ—Ç–∞–ª—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>
"""

        # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        for i, user in enumerate(recent_users[:5], 1):
            name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            phone = user.get("phone", "‚ùå")
            balance = (float(Decimal(str(user.get("bonus", 0)))) / 100.0) if user.get("bonus") else 0.0
            telegram_id = user.get("telegram_user_id", "N/A")
            
            stats_text += f"\n{i}. <b>{name}</b>"
            if len(name) > 25:
                stats_text += f"\n   üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω"
                stats_text += f"\n   üÜî TG: {telegram_id}"
            else:
                stats_text += f"\n   üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω | üÜî {telegram_id}"

        # –°—Ç–≤–æ—Ä—é—î–º–æ inline keyboard –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_stats_refresh"),
                InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—ñ", callback_data="admin_stats_details")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_back_to_panel_inline")
            ]
        ])

        await callback.message.edit_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)


@register_callback_handler("admin_stats_details")
async def admin_stats_details_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_stats_details –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        from decimal import Decimal
        bonus_service = get_bonus_service()
        all_users = await bonus_service.admin_users(50)  # –û—Ç—Ä–∏–º—É—î–º–æ –±—ñ–ª—å—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        
        if not all_users:
            await callback.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö", show_alert=True)
            return
            
        details_text = f"üìã <b>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ {len(all_users)}):</b>\n\n"
        
        # –ì—Ä—É–ø—É—î–º–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É
        with_phone = [u for u in all_users if u.get("phone")]
        without_phone = [u for u in all_users if not u.get("phone")]
        
        details_text += f"‚úÖ <b>–ó —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏ ({len(with_phone)}):</b>\n"
        for user in with_phone[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
            name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            phone = user.get("phone", "‚ùå")
            balance = (float(Decimal(str(user.get("bonus", 0)))) / 100.0) if user.get("bonus") else 0.0
            details_text += f"‚Ä¢ {name[:20]} | {phone} | {balance:.2f} –≥—Ä–Ω\n"
            
        if len(with_phone) > 10:
            details_text += f"... —Ç–∞ —â–µ {len(with_phone) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            
        details_text += f"\n‚ùå <b>–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ ({len(without_phone)}):</b>\n"
        for user in without_phone[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 5
            name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            balance = (float(Decimal(str(user.get("bonus", 0)))) / 100.0) if user.get("bonus") else 0.0
            tg_id = user.get("telegram_user_id", "N/A")
            details_text += f"‚Ä¢ {name[:20]} | üÜî {tg_id} | {balance:.2f} –≥—Ä–Ω\n"
            
        if len(without_phone) > 5:
            details_text += f"... —Ç–∞ —â–µ {len(without_phone) - 5} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ inline keyboard –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_stats_refresh")]
        ])
        
        await callback.message.edit_text(
            details_text,
            parse_mode="HTML",
            reply_markup=back_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–µ—Ç–∞–ª–µ–π: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π", show_alert=True)


@register_callback_handler("admin_back_to_panel_inline")
async def admin_back_to_panel_inline_callback(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_back_to_panel_inline –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        # –§–æ—Ä–º—É—î–º–æ inline keyboard –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        admin_inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üí∞ –ë–æ–Ω—É—Å–∏", callback_data="admin_bonuses")
            ],
            [
                InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_back")
            ]
        ])
        
        admin_text = (
            get_text("admin_panel")
            or "–í–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è:"
        )
        
        await callback.message.edit_text(
            admin_text,
            parse_mode="HTML",
            reply_markup=admin_inline_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó", show_alert=True)


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ callback handlers –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
@register_callback_handler("admin_stats")
async def admin_stats_inline_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_stats (inline) –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ refresh —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –≤–∂–µ –º–∞—î –≤—Å—é –ª–æ–≥—ñ–∫—É
        await admin_stats_refresh_callback(callback)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@register_callback_handler("admin_bonuses")
async def admin_bonuses_inline_callback(callback: CallbackQuery):
    """–ë–æ–Ω—É—Å–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_bonuses (inline) –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –±–æ–Ω—É—Å–∏ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(5)

        bonuses_text = "üí∞ <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–∞–º–∏:</b>\n\n"

        if recent_users:
            bonuses_text += "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–ª–∞–Ω—Å–∞–º–∏:</b>\n"
            total_balance = 0
            active_users = 0

            for user in recent_users:
                user_id = user.get("client_id", "N/A")
                name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                bonus = user.get("bonus", 0)
                balance_grn = float(Decimal(str(bonus))) / 100.0
                total_balance += float(Decimal(str(bonus)))
                if bonus > 0:
                    active_users += 1

                bonuses_text += f"‚Ä¢ {name[:20]} (#{user_id}): {balance_grn:.2f} –≥—Ä–Ω\n"

            bonuses_text += f"\nüìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            bonuses_text += f"‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {(total_balance/100):.2f} –≥—Ä–Ω\n"
            bonuses_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
            bonuses_text += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª–∞–Ω—Å: {(total_balance/100/len(recent_users)) if recent_users else 0:.2f} –≥—Ä–Ω\n"
        else:
            bonuses_text += "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–æ–Ω—É—Å–∞–º–∏ –ø–æ–∫–∏ –Ω–µ–º–∞—î\n"

        bonuses_text += "\nüîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n‚Ä¢ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏/—Å–ø–∏—Å–∞—Ç–∏ –±–æ–Ω—É—Å–∏\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π\n‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—É –ø–æ –±–æ–Ω—É—Å–∞—Ö"

        # –°—Ç–≤–æ—Ä—é—î–º–æ inline keyboard
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó", callback_data="admin_transactions"),
                InlineKeyboardButton(text="üìä –ó–≤—ñ—Ç", callback_data="admin_bonus_report")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_back_to_panel_inline")
            ]
        ])

        await callback.message.edit_text(
            bonuses_text,
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –±–æ–Ω—É—Å—ñ–≤: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", show_alert=True)


@register_callback_handler("admin_users")
async def admin_users_inline_callback(callback: CallbackQuery):
    """–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    logger = logging.getLogger("telegram_bot.handlers.admin")
    logger.info(f"admin_users (inline) –≤—ñ–¥ {callback.from_user.id}")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-—Å–µ—Ä–≤—ñ—Å
        bonus_service = get_bonus_service()
        recent_users = await bonus_service.admin_users(10)

        users_text = "üë• <b>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:</b>\n\n"

        if recent_users:
            users_text += "üìã <b>–û—Å—Ç–∞–Ω–Ω—ñ 10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
            for user in recent_users:
                name = user.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                phone = user.get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                user_id = user.get("telegram_user_id", "N/A")
                username = user.get("telegram_username", "")
                created_at = format_date(user.get("created_at", ""))

                phone_status = "üì±" if phone != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ" else "‚ùå"
                users_text += (
                    f"‚Ä¢ {phone_status} {user_id} (@{username}) - {created_at}\n"
                )
        else:
            users_text += "üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î\n"

        users_text += "\nüîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é\n‚Ä¢ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏\n‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"

        # –°—Ç–≤–æ—Ä—é—î–º–æ inline keyboard
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_users_details"),
                InlineKeyboardButton(text="üì± –ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤", callback_data="admin_users_no_phone")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data="admin_back_to_panel_inline")
            ]
        ])

        await callback.message.edit_text(
            users_text,
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", show_alert=True)
