import logging
from aiogram import types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from telegram_bot.handlers.common.dispatcher import register_button_handler
from telegram_bot.services.bonus_service_universal import get_bonus_service
from telegram_bot.data.bot_texts import get_text


# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
class BonusForm(StatesGroup):
    waiting_for_user = State()  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    waiting_for_amount = State()  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–æ–Ω—É—Å—ñ–≤
    waiting_for_reason = State()  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏
    waiting_for_confirmation = State()  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è


# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@register_button_handler("add_bonus")
async def add_bonus_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
    """
    from telegram_bot.data.bot_texts import get_text
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")
    admin_id = message.from_user.id
    logger.info(f"add_bonus_start –¥–ª—è admin_id={admin_id}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(operation="add", admin_id=admin_id)

    # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer(
        get_text("add_bonus_prompt") or (
            "üë§ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –±–æ–Ω—É—Å–∏,\n"
            "–∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (—ñ–º'—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É) –¥–ª—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n\n"
            "<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>"
        ),
        parse_mode="HTML",
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.set_state(BonusForm.waiting_for_user)


@register_button_handler("remove_bonus")
async def remove_bonus_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø—Ä–æ—Ü–µ—Å—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤
    """
    from telegram_bot.data.bot_texts import get_text
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")
    admin_id = message.from_user.id
    logger.info(f"remove_bonus_start –¥–ª—è admin_id={admin_id}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(operation="remove", admin_id=admin_id)

    # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer(
        get_text("remove_bonus_prompt") or (
            "üë§ <b>–°–ø–∏—Å–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —É —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–∏—Å–∞—Ç–∏ –±–æ–Ω—É—Å–∏,\n"
            "–∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç (—ñ–º'—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É) –¥–ª—è –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n\n"
            "<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>"
        ),
        parse_mode="HTML",
    )

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await state.set_state(BonusForm.waiting_for_user)


@register_button_handler("view_bonus_history")
async def view_bonus_history(message: Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω–∏
    """
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")
    admin_id = message.from_user.id
    logger.info(f"view_bonus_history –¥–ª—è admin_id={admin_id}")

    try:
        bonus_service = get_bonus_service()
        history = await bonus_service.get_bonus_history(limit=15)

        if not history:
            await message.answer(
                "üìù <b>–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤</b>\n\n" "–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.",
                parse_mode="HTML",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                    resize_keyboard=True,
                ),
            )
            return

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        history_text = "üìù <b>–û—Å—Ç–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –±–æ–Ω—É—Å–∞–º–∏:</b>\n\n"

        for i, item in enumerate(history, 1):
            user_id = item.get("client_id", "N/A")
            username = item.get("username", "")
            first_name = item.get("first_name", "")
            amount = item.get("amount", 0)
            description = item.get("description", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            from telegram_bot.utils.datetime_helpers import format_datetime
            created_at = format_datetime(item.get("created_at", ""))
            
            # –°–∏–º–≤–æ–ª –æ–ø–µ—Ä–∞—Ü—ñ—ó
            operation = "‚ûï" if amount > 0 else "‚ûñ"
            
            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_display = f"{first_name} (@{username})" if username else first_name or f"ID: {user_id}"
            
            # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            history_text += (
                f"{i}. {operation} <b>{user_display}</b>: {abs(amount)} –±–æ–Ω—É—Å—ñ–≤\n"
                f"   üìÖ {created_at}\n"
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω —è–∫—â–æ —î
            if item.get("store_name"):
                history_text += f"   üè™ {item['store_name']}\n"
                if item.get("store_address"):
                    # –°–∫–æ—Ä–æ—á—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
                    address = item['store_address']
                    if len(address) > 40:
                        address = address[:37] + "..."
                    history_text += f"   üìç {address}\n"
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–µ–∫ —è–∫—â–æ —î
            if item.get("receipt_number"):
                receipt_info = f"   üßæ –ß–µ–∫ #{item['receipt_number']}"
                if item.get("receipt_total"):
                    receipt_info += f" –Ω–∞ {item['receipt_total']:.2f} –≥—Ä–Ω"
                history_text += receipt_info + "\n"
            
            # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ —Ü–µ –Ω–µ –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ
            if not item.get("store_name") and description != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                history_text += f"   üìù {description}\n"
            
            history_text += "\n"

            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(history_text) > 3500:
                history_text += "...\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏</i>"
                break

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        await message.answer(
            history_text,
            parse_mode="HTML",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤: {e}")
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤: {e}",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )

        for i, item in enumerate(history, 1):
            user_id = item.get("user_id", "N/A")
            change = item.get("change", 0)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'change' –∑–∞–º—ñ—Å—Ç—å 'amount'
            description = item.get(
                "description", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            )  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 'description' –∑–∞–º—ñ—Å—Ç—å 'reason'
            from telegram_bot.utils.datetime_helpers import format_datetime

            created_at = format_datetime(item.get("created_at", ""))  # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            operation = "‚ûï" if change > 0 else "‚ûñ"

            history_text += (
                f"{i}. {operation} <b>User {user_id}</b>: {abs(change)} –±–æ–Ω—É—Å—ñ–≤\n"
            )
            history_text += f"   üìÖ {created_at}\n"
            history_text += f"   üìù {description}\n\n"

            # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(history_text) > 3000:
                history_text += "...\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏</i>"
                break

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        await message.answer(
            history_text,
            parse_mode="HTML",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤: {e}")
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –±–æ–Ω—É—Å—ñ–≤: {e}",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )


# –û–±—Ä–æ–±–Ω–∏–∫–∏ —Å—Ç–∞–Ω—ñ–≤ —Ñ–æ—Ä–º–∏
async def process_user_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–æ—à—É–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
    """
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º (ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
    if text.isdigit():
        user_id = int(text)
        bonus_service = get_bonus_service()
        user = await bonus_service.get_user_by_id(user_id)

        if user:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ
            await state.update_data(
                user_id=user_id, username=user.get("username", "N/A")
            )

            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            balance = await bonus_service.get_user_balance(user_id)

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑—ñ —Å—Ç–∞–Ω—É
            state_data = await state.get_data()
            operation = state_data.get("operation", "add")

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ü—ñ—ó
            if operation == "add":
                await message.answer(
                    f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:</b>\n"
                    f"ID: {user_id}\n"
                    f"–Ü–º'—è: {user.get('username', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –±–æ–Ω—É—Å—ñ–≤\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):\n\n"
                    f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                    parse_mode="HTML",
                )
            else:  # remove
                await message.answer(
                    f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:</b>\n"
                    f"ID: {user_id}\n"
                    f"–Ü–º'—è: {user.get('username', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –±–æ–Ω—É—Å—ñ–≤\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):\n\n"
                    f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                    parse_mode="HTML",
                )  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            await state.set_state(BonusForm.waiting_for_amount)
        else:
            await message.answer(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π ID –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç.\n\n"
                f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                parse_mode="HTML",
            )
    else:
        # –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º
        bonus_service = get_bonus_service()
        users = await bonus_service.search_users(text)

        if users:
            if len(users) == 1:
                # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—à–µ –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏–±–∏—Ä–∞—î–º–æ –π–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
                user = users[0]
                user_id = user.get("user_id")

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ
                await state.update_data(
                    user_id=user_id, username=user.get("username", "N/A")
                )

                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                balance = await bonus_service.get_user_balance(user_id)

                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑—ñ —Å—Ç–∞–Ω—É
                state_data = await state.get_data()
                operation = state_data.get("operation", "add")

                # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ–ø–µ—Ä–∞—Ü—ñ—ó
                if operation == "add":
                    await message.answer(
                        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:</b>\n"
                        f"ID: {user_id}\n"
                        f"–Ü–º'—è: {user.get('username', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                        f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –±–æ–Ω—É—Å—ñ–≤\n\n"
                        f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):\n\n"
                        f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                        parse_mode="HTML",
                    )
                else:  # remove
                    await message.answer(
                        f"üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:</b>\n"
                        f"ID: {user_id}\n"
                        f"–Ü–º'—è: {user.get('username', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                        f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} –±–æ–Ω—É—Å—ñ–≤\n\n"
                        f"–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è (—Ü—ñ–ª–µ —á–∏—Å–ª–æ):\n\n"
                        f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                        parse_mode="HTML",
                    )  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
                await state.set_state(BonusForm.waiting_for_amount)
            else:
                # –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
                users_text = "üë• <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"

                for user in users:
                    user_id = user.get("user_id", "N/A")
                    username = user.get("username", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                    phone = user.get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")

                    users_text += f"ID: {user_id}\n"
                    users_text += f"–Ü–º'—è: {username}\n"
                    users_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"

                users_text += (
                    "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–∞–≤–µ–¥–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.\n\n"
                )
                users_text += "<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>"

                await message.answer(
                    users_text,
                    parse_mode="HTML",
                )
        else:
            await message.answer(
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{text}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç.\n\n"
                f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                parse_mode="HTML",
            )


async def process_amount_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–æ–Ω—É—Å—ñ–≤
    """
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
    if text.isdigit() and int(text) > 0:
        amount = int(text)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤ –≤ —Å—Ç–∞–Ω—ñ
        await state.update_data(amount=amount)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑—ñ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        operation = state_data.get("operation", "add")
        user_id = state_data.get("user_id")
        username = state_data.get("username", "N/A")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è
        if operation == "remove":
            bonus_service = get_bonus_service()
            balance = await bonus_service.get_user_balance(user_id)
            if balance < amount:
                await message.answer(
                    f"‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è.\n"
                    f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance}\n"
                    f"–í–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—å —Å–ø–∏—Å–∞—Ç–∏: {amount}\n\n"
                    f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–æ–Ω—É—Å—ñ–≤:\n\n"
                    f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                    parse_mode="HTML",
                )
                return

        # –ü—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—ó
        if operation == "add":
            await message.answer(
                f"üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è {amount} –±–æ–Ω—É—Å—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}</b>\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n\n"
                f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                parse_mode="HTML",
            )
        else:  # remove
            await message.answer(
                f"üìù <b>–°–ø–∏—Å–∞–Ω–Ω—è {amount} –±–æ–Ω—É—Å—ñ–≤ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username}</b>\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–ø–∏—Å–∞–Ω–Ω—è –±–æ–Ω—É—Å—ñ–≤:\n\n"
                f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
                parse_mode="HTML",
            )  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        await state.set_state(BonusForm.waiting_for_reason)
    else:
        await message.answer(
            f"‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.\n\n"
            f"<i>–í–≤–µ–¥—ñ—Ç—å '—Å–∫–∞—Å—É–≤–∞—Ç–∏' —â–æ–± –ø–µ—Ä–µ—Ä–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å.</i>",
            parse_mode="HTML",
        )


async def process_reason_input(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    """
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.clear()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏—á–∏–Ω—É –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(reason=text)

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    state_data = await state.get_data()
    operation = state_data.get("operation", "add")
    user_id = state_data.get("user_id")
    username = state_data.get("username", "N/A")
    amount = state_data.get("amount")

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if operation == "add":
        confirmation_text = (
            f"‚úÖ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:</b>\n\n"
            f"–í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ <b>{amount}</b> –±–æ–Ω—É—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É:\n"
            f"ID: {user_id}\n"
            f"–Ü–º'—è: {username}\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {text}\n\n"
            f"–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å '—Ç–∞–∫'.\n"
            f"–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å '–Ω—ñ'."
        )
    else:  # remove
        confirmation_text = (
            f"‚úÖ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó:</b>\n\n"
            f"–í–∏ —Ö–æ—á–µ—Ç–µ —Å–ø–∏—Å–∞—Ç–∏ <b>{amount}</b> –±–æ–Ω—É—Å—ñ–≤ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n"
            f"ID: {user_id}\n"
            f"–Ü–º'—è: {username}\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {text}\n\n"
            f"–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å '—Ç–∞–∫'.\n"
            f"–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å '–Ω—ñ'."
        )

    await message.answer(
        confirmation_text,
        parse_mode="HTML",
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.set_state(BonusForm.waiting_for_confirmation)


async def process_confirmation(message: Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
    """
    logger = logging.getLogger("telegram_bot.handlers.admin_bonus")

    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    text = message.text.strip().lower()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if text == "—Ç–∞–∫":
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        operation = state_data.get("operation", "add")
        user_id = state_data.get("user_id")
        amount = state_data.get("amount")
        reason = state_data.get("reason")
        admin_id = state_data.get("admin_id")

        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
            bonus_service = get_bonus_service()
            if operation == "add":
                success = await bonus_service.add_bonus(
                    user_id=user_id, amount=amount, reason=reason, admin_id=admin_id
                )

                if success:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
                    new_balance = await bonus_service.get_user_balance(user_id)

                    await message.answer(
                        f"‚úÖ <b>–ë–æ–Ω—É—Å–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ID {user_id} –¥–æ–¥–∞–Ω–æ {amount} –±–æ–Ω—É—Å—ñ–≤.\n"
                        f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–æ–Ω—É—Å—ñ–≤.\n\n"
                        f"–û–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
                        parse_mode="HTML",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[
                                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]
                            ],
                            resize_keyboard=True,
                        ),
                    )
                else:
                    await message.answer(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –±–æ–Ω—É—Å—ñ–≤.\n\n"
                        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[
                                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]
                            ],
                            resize_keyboard=True,
                        ),
                    )
            else:  # remove
                success = await bonus_service.remove_bonus(
                    user_id=user_id, amount=amount, reason=reason, admin_id=admin_id
                )

                if success:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
                    new_balance = await bonus_service.get_user_balance(user_id)

                    await message.answer(
                        f"‚úÖ <b>–ë–æ–Ω—É—Å–∏ —É—Å–ø—ñ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ!</b>\n\n"
                        f"–£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ID {user_id} —Å–ø–∏—Å–∞–Ω–æ {amount} –±–æ–Ω—É—Å—ñ–≤.\n"
                        f"–ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –±–æ–Ω—É—Å—ñ–≤.\n\n"
                        f"–û–ø–µ—Ä–∞—Ü—ñ—é –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
                        parse_mode="HTML",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[
                                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]
                            ],
                            resize_keyboard=True,
                        ),
                    )
                else:
                    await message.answer(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ –±–æ–Ω—É—Å—ñ–≤.\n\n"
                        f"–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.",
                        reply_markup=types.ReplyKeyboardMarkup(
                            keyboard=[
                                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]
                            ],
                            resize_keyboard=True,
                        ),
                    )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –±–æ–Ω—É—Å–∞–º–∏: {e}")
            await message.answer(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó: {str(e)}",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                    resize_keyboard=True,
                ),
            )
    else:
        # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ")]],
                resize_keyboard=True,
            ),
        )

    # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Ñ–æ—Ä–º—É
    await state.clear()


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å—Ç–∞–Ω—ñ–≤
def register_admin_bonus_handlers(dp):
    """
    –†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å—Ç–∞–Ω—ñ–≤ —Ñ–æ—Ä–º–∏ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—ñ
    """
    dp.message.register(process_user_input, BonusForm.waiting_for_user)
    dp.message.register(process_amount_input, BonusForm.waiting_for_amount)
    dp.message.register(process_reason_input, BonusForm.waiting_for_reason)
    dp.message.register(process_confirmation, BonusForm.waiting_for_confirmation)
