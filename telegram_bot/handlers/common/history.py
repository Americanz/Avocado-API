import logging
from aiogram.types import Message
from telegram_bot.handlers.common.dispatcher import register_button_handler
from telegram_bot.services.bonus_service_universal import get_bonus_service


@register_button_handler("show_history")
async def show_history(message: Message):
    logger = logging.getLogger("telegram_bot.handlers.history")
    user_id = message.from_user.id
    logger.info(f"show_history –¥–ª—è user_id={user_id}")
    try:
        bonus_service = get_bonus_service()
        history = await bonus_service.get_user_history(user_id)
        
        # PostgreSQL —Å–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä—Ç–∞—î –≥–æ—Ç–æ–≤—É —Å—Ç—Ä–æ–∫—É –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é
        if isinstance(history, str):
            await message.answer(history, parse_mode="HTML")
            return
        
        from telegram_bot.data.bot_texts import get_text

        if not history:
            text = get_text("history_empty") or "–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è."
            await message.answer(text)
            return

        # –§–æ—Ä–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω–∏ (–¥–ª—è —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤)
        items = []
        for item in history:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            date_str = item.get("created_at", "").strftime("%d.%m.%Y %H:%M") if item.get("created_at") else ""
            
            # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            amount = item.get("amount", 0)
            amount_str = f"+{amount}" if amount > 0 else str(amount)
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω —ñ —á–µ–∫
            store_info = ""
            if item.get("store_name"):
                store_info = f"\nüè™ {item['store_name']}"
                if item.get("store_address"):
                    # –°–∫–æ—Ä–æ—á—É—î–º–æ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
                    address = item['store_address']
                    if len(address) > 30:
                        address = address[:27] + "..."
                    store_info += f"\nüìç {address}"
            
            receipt_info = ""
            if item.get("receipt_number"):
                receipt_info = f"\nüßæ –ß–µ–∫ #{item['receipt_number']}"
                if item.get("receipt_total"):
                    receipt_info += f" –Ω–∞ {item['receipt_total']:.2f} –≥—Ä–Ω"
            
            # –°–∫–ª–∞–¥–∞—î–º–æ –ø–æ–≤–Ω–∏–π –∑–∞–ø–∏—Å
            history_entry = f"üìÖ {date_str}\nüí∞ {amount_str} –±–æ–Ω—É—Å—ñ–≤"
            if store_info:
                history_entry += store_info
            if receipt_info:
                history_entry += receipt_info
            
            # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å —è–∫—â–æ —î
            if item.get("description") and not item.get("store_name"):
                history_entry += f"\nüìù {item['description']}"
            
            items.append(history_entry)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Å—Ç–∏–Ω–∞–º–∏ —è–∫—â–æ –≤–æ–Ω–∞ –¥–æ–≤–≥–∞
        text = "üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –±–æ–Ω—É—Å—ñ–≤:</b>\n\n" + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n".join(items)
        
        # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ~4000 —Å–∏–º–≤–æ–ª—ñ–≤
        if len(text) > 3800:
            # –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            parts = []
            current_part = "üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –±–æ–Ω—É—Å—ñ–≤:</b>\n\n"
            
            for item in items:
                if len(current_part + item + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n") > 3800:
                    parts.append(current_part.rstrip("\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"))
                    current_part = item + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
                else:
                    current_part += item + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"
            
            if current_part.strip():
                parts.append(current_part.rstrip("\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"))
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏
            for i, part in enumerate(parts):
                if i > 0:
                    part = f"üìä <b>–Ü—Å—Ç–æ—Ä—ñ—è –≤–∞—à–∏—Ö –±–æ–Ω—É—Å—ñ–≤ (—á–∞—Å—Ç–∏–Ω–∞ {i+1}):</b>\n\n" + part.split("\n\n", 1)[1] if "\n\n" in part else part
                await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {e}")
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó: {str(e)}")
