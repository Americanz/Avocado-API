import logging
from aiogram.types import Message
from telegram_bot.handlers.common.permissions import is_admin
from telegram_bot.handlers.common.dispatcher import dispatch_button_handler
from telegram_bot.navigation.decorators import button_handler
from telegram_bot.data.bot_texts import get_text
from telegram_bot.utils.logging import log_admin_action

logger = logging.getLogger("telegram_bot.admin")


@button_handler
async def admin_panel(message: Message):
    """–ì–æ–ª–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    log_admin_action(message, "admin_panel")
    
    await message.answer(
        get_text("admin_panel") or "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
    )


@button_handler
async def admin_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer(get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    logger.info(f"admin_stats –≤—ñ–¥ {message.from_user.id}")
    
    from telegram_bot.services.bonus_service_universal import get_bonus_service
    
    try:
        bonus_service = get_bonus_service()
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–æ—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = get_text("admin_stats") or "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:"
        stats_text += "\n\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: -\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: -\nüìà –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: -"
        
        await message.answer(stats_text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(get_text("admin_stats_error") or "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@button_handler
async def admin_users(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer(get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    logger.info(f"admin_users –≤—ñ–¥ {message.from_user.id}")
    
    await message.answer(
        get_text("admin_users") or "üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n\n(–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)"
    )


@button_handler
async def admin_back(message: Message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º–µ–Ω—é"""
    if not is_admin(message.from_user.id):
        await message.answer(get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    log_admin_action(message, "admin_back")
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    from telegram_bot.data.keyboards import get_keyboard
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard_buttons = []
    for btn in get_keyboard("main"):
        if btn["enabled"]:
            keyboard_buttons.append([KeyboardButton(text=btn["text"])])
    
    # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏
    for btn in get_keyboard("admin"):
        if btn["enabled"]:
            keyboard_buttons.append([KeyboardButton(text=btn["text"])])

    keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)
    
    await message.answer(
        get_text("back_to_menu") or "‚Ü©Ô∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )


@button_handler
async def admin_back_to_panel(message: Message):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
        
    logger.info(f"admin_back_to_panel –≤—ñ–¥ {message.from_user.id}")
    
    await dispatch_button_handler("admin_panel", message)
