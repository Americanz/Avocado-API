import logging
from datetime import datetime, timedelta
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telegram_bot.handlers.common.permissions import is_admin
from telegram_bot.handlers.common.dispatcher import register_button_handler
from telegram_bot.data.bot_texts import get_text
from src.features.telegram_bot.poster.service import get_poster_service

logger = logging.getLogger("telegram_bot.admin.poster")


@register_button_handler("poster_sync")
async def poster_sync_menu(message: Message):
    """–ú–µ–Ω—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ Poster"""
    if not is_admin(message.from_user.id):
        await message.answer(
            get_text("admin_access_denied") or "‚õîÔ∏è –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return

    logger.info(f"poster_sync_menu –≤—ñ–¥ {message.from_user.id}")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì• –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó",
                    callback_data="sync_transactions",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó", callback_data="sync_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è", callback_data="auto_sync_settings"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Poster", callback_data="poster_settings"
                )
            ],
        ]
    )

    await message.answer(
        "üè™ <b>–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Poster</b>\n\n" "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–æ—é Poster:",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


@register_button_handler("sync_transactions")
async def sync_transactions(message: Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑ Poster"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    logger.info(f"sync_transactions –≤—ñ–¥ {message.from_user.id}")

    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
    status_msg = await message.answer("üîÑ –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ Poster...")

    try:
        poster_service = await get_poster_service()
        if not poster_service:
            await status_msg.edit_text(
                "‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó</b>\n\n"
                "–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Poster API.\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏.",
                parse_mode="HTML",
            )
            return

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        date_from = datetime.now() - timedelta(days=7)
        date_to = datetime.now()

        await status_msg.edit_text("üì° –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –∑ Poster API...")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        transactions = await poster_service.get_transactions(date_from, date_to)

        if not transactions:
            await status_msg.edit_text(
                "üì≠ <b>–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n" "–ù–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode="HTML",
            )
            return

        await status_msg.edit_text(
            f"üíæ –ó–±–µ—Ä—ñ–≥–∞—é {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö..."
        )

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        start_time = datetime.utcnow()
        stats = poster_service.sync_transactions_to_db(transactions)

        # –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        poster_service.log_sync_result(
            "transactions", "success", {**stats, "start_time": start_time}
        )

        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = (
            "‚úÖ <b>–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}\n"
            f"‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏—Ö: {stats['created']}\n"
            f"‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}\n"
            f"‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {stats['errors']}\n\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: {date_from.strftime('%d.%m.%Y')} - {date_to.strftime('%d.%m.%Y')}"
        )

        await status_msg.edit_text(result_text, parse_mode="HTML")

        # –î–æ–¥–∞—Ç–∫–æ–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        if stats["created"] > 0:
            await message.answer("üõçÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é –ø—Ä–æ–¥—É–∫—Ç–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...")
            # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ–¥—É–∫—Ç—ñ–≤

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
        await status_msg.edit_text(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó</b>\n\n"
            f"–î–µ—Ç–∞–ª—ñ: {str(e)}\n\n"
            f"–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode="HTML",
        )


@register_button_handler("sync_stats")
async def sync_statistics(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    logger.info(f"sync_stats –≤—ñ–¥ {message.from_user.id}")

    try:
        poster_service = await get_poster_service()
        if not poster_service:
            await message.answer("‚ùå –°–µ—Ä–≤—ñ—Å Poster –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        with poster_service.SessionLocal() as db:
            from src.features.telegram_bot.models import (
                Transaction,
                SyncLog,
            )

            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
            total_transactions = db.query(Transaction).count()
            synced_to_telegram = (
                db.query(Transaction)
                .filter(Transaction.is_synced_to_telegram == True)
                .count()
            )

            # –û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            recent_syncs = (
                db.query(SyncLog).order_by(SyncLog.created_at.desc()).limit(5).all()
            )

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó Poster</b>\n\n"
            f"üè™ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ –≤ –±–∞–∑—ñ: {total_transactions}\n"
            f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ –±–æ—Ç–æ–º: {synced_to_telegram}\n"
            f"‚Ä¢ –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ: {total_transactions - synced_to_telegram}\n\n"
        )

        if recent_syncs:
            stats_text += "üîÑ <b>–û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:</b>\n"
            for sync in recent_syncs:
                status_emoji = "‚úÖ" if sync.status == "success" else "‚ùå"
                stats_text += (
                    f"{status_emoji} {sync.sync_type} - "
                    f"{sync.created_at.strftime('%d.%m %H:%M')}\n"
                    f"   –ó–∞–ø–∏—Å—ñ–≤: {sync.records_success}/{sync.records_processed}\n"
                )

        await message.answer(stats_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@register_button_handler("poster_settings")
async def poster_settings(message: Message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Poster"""
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return

    logger.info(f"poster_settings –≤—ñ–¥ {message.from_user.id}")

    try:
        from src.config.settings import get_settings

        settings = get_settings()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        api_token = getattr(settings, "POSTER_API_TOKEN", None)
        account_name = getattr(settings, "POSTER_ACCOUNT_NAME", None)

        token_status = "‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π" if api_token else "‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
        account_status = "‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π" if account_name else "‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"

        settings_text = (
            "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Poster API</b>\n\n"
            f"üîë <b>API Token:</b> {token_status}\n"
            f"üè¢ <b>Account Name:</b> {account_status}\n\n"
        )

        if api_token and account_name:
            settings_text += (
                f"üåê <b>API URL:</b>\n"
                f"https://{account_name}.joinposter.com/api\n\n"
                "‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏"
            )
        else:
            settings_text += (
                "‚ö†Ô∏è <b>–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Poster –ø–æ—Ç—Ä—ñ–±–Ω–æ:</b>\n"
                "1. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ POSTER_API_TOKEN\n"
                "2. –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ POSTER_ACCOUNT_NAME\n"
                "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n\n"
                "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏."
            )

        await message.answer(settings_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
