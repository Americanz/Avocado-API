"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ–Ω—É—Å–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é
"""

import logging
import re
from aiogram import types
from aiogram.types import Message
from aiogram.filters import Command
from telegram_bot.services.bonus_service_universal import get_bonus_service

logger = logging.getLogger("telegram_bot.bonus_commands")


async def cmd_bonus(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /bonus [client_id|phone|name] - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ–Ω—É—Å–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
    logger.info(f"cmd_bonus –≤—ñ–¥ {message.from_user.id}: {message.text}")

    # –í–∏—Ç—è–≥—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç –∑ –∫–æ–º–∞–Ω–¥–∏
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer(
            "üîç <b>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–æ–Ω—É—Å—ñ–≤</b>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/bonus [ID|—Ç–µ–ª–µ—Ñ–æ–Ω|—ñ–º'—è]</code>\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ <code>/bonus 13763</code> - –∑–∞ ID\n"
            "‚Ä¢ <code>/bonus +380671234567</code> - –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º\n"
            "‚Ä¢ <code>/bonus –Ü–≤–∞–Ω</code> - –∑–∞ —ñ–º'—è–º\n",
            parse_mode="HTML",
        )
        return

    query = " ".join(args)
    bonus_service = get_bonus_service()

    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É —è–∫ ID
        if query.isdigit():
            client_id = int(query)
            user_data = await bonus_service.get_user_by_id(client_id)

            if user_data:
                balance = await bonus_service.get_user_balance(client_id)
                await message.answer(
                    f"üßë‚Äçüíº <b>–ö–ª—ñ—î–Ω—Ç #{client_id}</b>\n"
                    f"üìõ <b>–Ü–º'—è:</b> {user_data.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user_data.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f} –≥—Ä–Ω\n\n"
                    f"–î–ª—è –ø–æ–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó: <code>/history {client_id}</code>",
                    parse_mode="HTML",
                )
                return

        # –Ø–∫—â–æ –Ω–µ ID, —à—É–∫–∞—î–º–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º
        search_results = await bonus_service.search_users(query, limit=5)

        if not search_results:
            await message.answer(f"‚ùå –ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        if len(search_results) == 1:
            # –ó–Ω–∞–π–¥–µ–Ω–∏–π –æ–¥–∏–Ω –∫–ª—ñ—î–Ω—Ç - –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            client = search_results[0]
            client_id = client["client_id"]
            balance = await bonus_service.get_user_balance(client_id)

            await message.answer(
                f"üßë‚Äçüíº <b>–ö–ª—ñ—î–Ω—Ç #{client_id}</b>\n"
                f"üìõ <b>–Ü–º'—è:</b> {client.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {client.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:.2f} –≥—Ä–Ω\n\n"
                f"–î–ª—è –ø–æ–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó: <code>/history {client_id}</code>",
                parse_mode="HTML",
            )
        else:
            # –ó–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤ - –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
            response = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}':</b>\n\n"

            for client in search_results:
                client_id = client["client_id"]
                name = client.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                phone = client.get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
                balance = client.get("bonus", 0) / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫

                response += f"üë§ <b>#{client_id}</b> - {name}\n"
                response += f"üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω\n"
                response += f"<code>/bonus {client_id}</code> - –¥–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è\n\n"

            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_bonus: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç–∞")


async def cmd_history(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /history [client_id|phone|name] - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é –±–æ–Ω—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞"""
    logger.info(f"cmd_history –≤—ñ–¥ {message.from_user.id}: {message.text}")

    # –í–∏—Ç—è–≥—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç –∑ –∫–æ–º–∞–Ω–¥–∏
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer(
            "üìã <b>–Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞</b>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/history [ID|—Ç–µ–ª–µ—Ñ–æ–Ω|—ñ–º'—è]</code>\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ <code>/history 13763</code> - –∑–∞ ID\n"
            "‚Ä¢ <code>/history +380671234567</code> - –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º\n"
            "‚Ä¢ <code>/history –Ü–≤–∞–Ω</code> - –∑–∞ —ñ–º'—è–º\n",
            parse_mode="HTML",
        )
        return

    query = " ".join(args)
    bonus_service = get_bonus_service()

    try:
        client_id = None

        # –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É —è–∫ ID
        if query.isdigit():
            client_id = int(query)
            user_data = await bonus_service.get_user_by_id(client_id)
            if not user_data:
                await message.answer(f"‚ùå –ö–ª—ñ—î–Ω—Ç #{client_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                return
        else:
            # –®—É–∫–∞—î–º–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º
            search_results = await bonus_service.search_users(query, limit=5)

            if not search_results:
                await message.answer(f"‚ùå –ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return

            if len(search_results) == 1:
                client_id = search_results[0]["client_id"]
            else:
                # –ö—ñ–ª—å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ - –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫
                response = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n\n"
                for client in search_results:
                    response += f"üë§ <b>#{client['client_id']}</b> - {client.get('name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"üìû {client.get('phone', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
                    response += f"<code>/history {client['client_id']}</code>\n\n"

                await message.answer(response, parse_mode="HTML")
                return

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é
        if client_id:
            await message.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é —ñ—Å—Ç–æ—Ä—ñ—é –±–æ–Ω—É—Å—ñ–≤...")

            history = await bonus_service.get_user_history(client_id, limit=10)

            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(history) > 4000:
                parts = []
                lines = history.split("\n")
                current_part = ""

                for line in lines:
                    if len(current_part + line + "\n") > 4000:
                        parts.append(current_part)
                        current_part = line + "\n"
                    else:
                        current_part += line + "\n"

                if current_part:
                    parts.append(current_part)

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∞–º–∏
                for i, part in enumerate(parts):
                    if i == 0:
                        await message.answer(part, parse_mode="HTML")
                    else:
                        await message.answer(
                            f"üìÑ <b>–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è ({i+1}/{len(parts)})...</b>\n\n{part}",
                            parse_mode="HTML",
                        )
            else:
                await message.answer(history, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_history: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó")


async def cmd_search(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /search [query] - –ø–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    logger.info(f"cmd_search –≤—ñ–¥ {message.from_user.id}: {message.text}")

    # –í–∏—Ç—è–≥—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç –∑ –∫–æ–º–∞–Ω–¥–∏
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []

    if not args:
        await message.answer(
            "üîç <b>–ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤</b>\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/search [–∑–∞–ø–∏—Ç]</code>\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ <code>/search –Ü–≤–∞–Ω</code> - –∑–∞ —ñ–º'—è–º\n"
            "‚Ä¢ <code>/search 380671234</code> - –∑–∞ —á–∞—Å—Ç–∏–Ω–æ—é —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            "‚Ä¢ <code>/search –ü–µ—Ç—Ä–µ–Ω–∫–æ</code> - –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º\n",
            parse_mode="HTML",
        )
        return

    query = " ".join(args)
    bonus_service = get_bonus_service()

    try:
        await message.answer(f"üîç –®—É–∫–∞—é –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}'...")

        search_results = await bonus_service.search_users(query, limit=15)

        if not search_results:
            await message.answer(f"‚ùå –ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        response = f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n\n"

        for client in search_results:
            client_id = client["client_id"]
            name = client.get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            phone = client.get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
            balance = client.get("bonus", 0) / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫

            response += f"üë§ <b>#{client_id}</b> - {name}\n"
            response += f"üìû {phone} | üí∞ {balance:.2f} –≥—Ä–Ω\n"
            response += f"<code>/bonus {client_id}</code> | <code>/history {client_id}</code>\n\n"

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, —è–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–æ
        if len(response) > 4000:
            parts = []
            lines = response.split("\n")
            current_part = (
                f"üîç <b>–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} –∫–ª—ñ—î–Ω—Ç—ñ–≤ (—á–∞—Å—Ç–∏–Ω–∞ 1):</b>\n\n"
            )

            for line in lines[2:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_part + line + "\n") > 4000:
                    parts.append(current_part)
                    current_part = f"üìÑ <b>–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...</b>\n\n{line}\n"
                else:
                    current_part += line + "\n"

            if current_part:
                parts.append(current_part)

            for part in parts:
                await message.answer(part, parse_mode="HTML")
        else:
            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_search: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤")


def register_bonus_commands(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ–Ω—É—Å–∞–º–∏"""
    dp.message.register(cmd_bonus, Command("bonus"))
    dp.message.register(cmd_history, Command("history"))
    dp.message.register(cmd_search, Command("search"))
