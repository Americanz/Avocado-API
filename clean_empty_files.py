#!/usr/bin/env python3
"""
–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤
–í–∏–¥–∞–ª—è—î –≤—Å—ñ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏ –∫—Ä—ñ–º —Ç–∏—Ö, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
"""

import os
import glob
from pathlib import Path


class ProjectCleaner:
    """–û—á–∏—â—É–≤–∞—á –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤"""

    def __init__(self, project_root=None):
        self.project_root = (
            Path(project_root) if project_root else Path(__file__).parent
        )

        # –§–∞–π–ª–∏ —è–∫—ñ –ù–ï –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–æ–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ
        self.keep_empty_files = {
            "__init__.py",  # Python –ø–∞–∫–µ—Ç–∏
            ".gitkeep",  # Git placeholder —Ñ–∞–π–ª–∏
            ".keep",  # –Ü–Ω—à—ñ placeholder —Ñ–∞–π–ª–∏
            "requirements.txt",  # –ú–æ–∂–µ –±—É—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –ø–æ—Ä–æ–∂–Ω—ñ–º
            "README.md",  # –ú–æ–∂–µ –±—É—Ç–∏ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è
            ".env.example",  # –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        }

        # –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—ñ –ù–ï –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏
        self.skip_directories = {
            ".venv",
            "venv",
            ".git",
            "__pycache__",
            ".pytest_cache",
            "node_modules",
            ".idea",
            ".vscode",
            "dist",
            "build",
            ".eggs",
            "*.egg-info",
            ".coverage",
            "htmlcov",
            ".mypy_cache",
            ".tox",
            "logs",  # –õ–æ–≥ —Ñ–∞–π–ª–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏
        }

        # –¢–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        self.file_extensions = {
            "*.py",
            "*.js",
            "*.ts",
            "*.css",
            "*.html",
            "*.md",
            "*.txt",
            "*.json",
            "*.yaml",
            "*.yml",
            "*.xml",
            "*.sql",
            "*.sh",
            "*.bat",
            "*.ps1",
        }

    def should_skip_directory(self, dir_path):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é"""
        dir_name = dir_path.name

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ—á–Ω—ñ –Ω–∞–∑–≤–∏
        if dir_name in self.skip_directories:
            return True

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ç–µ—Ä–Ω–∏
        for pattern in self.skip_directories:
            if "*" in pattern and dir_name.startswith(pattern.replace("*", "")):
                return True

        return False

    def should_keep_file(self, file_path):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π"""
        filename = file_path.name

        # –¢–æ—á–Ω—ñ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—ñ–≤
        if filename in self.keep_empty_files:
            return True

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏
        if filename.startswith(".env"):
            return True

        if filename.endswith(".example"):
            return True

        return False

    def is_file_empty(self, file_path):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ –ø—Ä–æ–±—ñ–ª–∏"""
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read().strip()
                return len(content) == 0
        except (UnicodeDecodeError, PermissionError):
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª, –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
            return False

    def find_empty_files(self):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç—ñ"""
        empty_files = []

        print(f"üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É: {self.project_root}")
        print("=" * 60)

        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)

            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ–±—Ö–æ–¥—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏
            dirs[:] = [d for d in dirs if not self.should_skip_directory(root_path / d)]

            for file in files:
                file_path = root_path / file

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
                file_matches = any(
                    file_path.match(pattern) for pattern in self.file_extensions
                )
                if not file_matches:
                    continue

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π
                if self.is_file_empty(file_path):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª
                    if self.should_keep_file(file_path):
                        print(
                            f"‚ö™ –ó–ë–ï–†–ï–ñ–ï–ù–û (–ø–æ—Ç—Ä—ñ–±–Ω–∏–π): {file_path.relative_to(self.project_root)}"
                        )
                    else:
                        empty_files.append(file_path)
                        print(
                            f"üî¥ –ó–ù–ê–ô–î–ï–ù–û –ø–æ—Ä–æ–∂–Ω—ñ–π: {file_path.relative_to(self.project_root)}"
                        )

        return empty_files

    def delete_empty_files(self, empty_files, confirm=True):
        """–í–∏–¥–∞–ª—è—î –ø–æ—Ä–æ–∂–Ω—ñ —Ñ–∞–π–ª–∏"""
        if not empty_files:
            print("\n‚úÖ –ü–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return

        print(f"\nüìã –ó–ù–ê–ô–î–ï–ù–û {len(empty_files)} –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:")
        for file_path in empty_files:
            print(f"   üóëÔ∏è  {file_path.relative_to(self.project_root)}")

        if confirm:
            answer = (
                input(f"\n‚ùì –í–∏–¥–∞–ª–∏—Ç–∏ {len(empty_files)} —Ñ–∞–π–ª—ñ–≤? (y/N): ")
                .strip()
                .lower()
            )
            if answer not in ["y", "yes", "—Ç–∞–∫", "–¥–∞"]:
                print("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                return

        deleted_count = 0
        for file_path in empty_files:
            try:
                file_path.unlink()
                print(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {file_path.relative_to(self.project_root)}")
                deleted_count += 1
            except Exception as e:
                print(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {file_path.relative_to(self.project_root)}: {e}"
                )

        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑ {len(empty_files)} —Ñ–∞–π–ª—ñ–≤")

    def clean_project(self, auto_confirm=False):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
        print("üßπ –û–ß–ò–©–ï–ù–ù–Ø –ü–†–û–ï–ö–¢–£ –í–Ü–î –ü–û–†–û–ñ–ù–Ü–• –§–ê–ô–õ–Ü–í")
        print("=" * 60)

        empty_files = self.find_empty_files()

        if empty_files:
            self.delete_empty_files(empty_files, confirm=not auto_confirm)

        print("\n" + "=" * 60)
        print("‚úÖ –û–ß–ò–©–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 60)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥ –ø–æ—Ä–æ–∂–Ω—ñ—Ö —Ñ–∞–π–ª—ñ–≤")
    parser.add_argument(
        "--path", "-p", help="–®–ª—è—Ö –¥–æ –ø—Ä–æ–µ–∫—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è)"
    )
    parser.add_argument(
        "--auto",
        "-a",
        action="store_true",
        help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
    )
    parser.add_argument(
        "--dry-run",
        "-d",
        action="store_true",
        help="–¢—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ñ–∞–π–ª–∏, –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏",
    )

    args = parser.parse_args()

    cleaner = ProjectCleaner(args.path)

    if args.dry_run:
        print("üîç –†–ï–ñ–ò–ú –ü–ï–†–ï–ì–õ–Ø–î–£ (—Ñ–∞–π–ª–∏ –Ω–µ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ)")
        print("=" * 60)
        empty_files = cleaner.find_empty_files()
        if empty_files:
            print(f"\nüìã –ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ {len(empty_files)} —Ñ–∞–π–ª—ñ–≤:")
            for file_path in empty_files:
                print(f"   üóëÔ∏è  {file_path.relative_to(cleaner.project_root)}")
    else:
        cleaner.clean_project(auto_confirm=args.auto)


if __name__ == "__main__":
    main()
