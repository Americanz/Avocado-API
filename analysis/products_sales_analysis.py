#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
"""

import asyncio
import os
import sys
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


async def analyze_products_sales():
    """–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥–∞–∂—ñ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö"""
    from src.core.database.connection import AsyncSessionLocal
    from src.features.telegram_bot.models.product import Product
    from src.features.telegram_bot.models.transaction_product import (
        TransactionProduct,
    )
    from src.features.telegram_bot.models.transaction import Transaction
    from sqlalchemy import select, func, desc, and_

    async with AsyncSessionLocal() as session:
        print("üõçÔ∏è –ê–ù–ê–õ–Ü–ó –ü–†–û–î–ê–ñ–Ü–í –ü–û –¢–û–í–ê–†–ê–•")
        print("=" * 60)

        # 1. –¢–û–ü-20 –Ω–∞–π–ø—Ä–æ–¥–∞–≤–∞–Ω—ñ—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é
        print("üìä –¢–û–ü-20 –ù–ê–ô–ü–†–û–î–ê–í–ê–ù–Ü–®–ò–• –¢–û–í–ê–†–Ü–í –ó–ê –ö–Ü–õ–¨–ö–Ü–°–¢–Æ:")
        print("-" * 60)

        top_by_quantity_query = (
            select(
                Product.product_name,
                Product.category_name,
                func.sum(TransactionProduct.count).label("total_quantity"),
                func.count(TransactionProduct.id).label("order_count"),
                func.sum(TransactionProduct.sum).label("total_revenue"),
                func.avg(TransactionProduct.sum / TransactionProduct.count).label(
                    "avg_price"
                ),
            )
            .select_from(Product)
            .join(
                TransactionProduct,
                Product.poster_product_id == TransactionProduct.poster_product_id,
            )
            .group_by(Product.product_name, Product.category_name)
            .order_by(desc("total_quantity"))
            .limit(20)
        )

        quantity_result = await session.execute(top_by_quantity_query)
        top_quantity = quantity_result.all()

        for i, product in enumerate(top_quantity, 1):
            avg_price = float(product.avg_price or 0)
            total_rev = float(product.total_revenue or 0)

            print(f"{i:2d}. {product.product_name}")
            print(f"    üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {product.category_name}")
            print(f"    üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product.total_quantity} —à—Ç")
            print(f"    üî¢ –ó–∞–º–æ–≤–ª–µ–Ω—å: {product.order_count}")
            print(f"    üí∞ –û–±–æ—Ä–æ—Ç: {total_rev:,.2f} –≥—Ä–Ω")
            print(f"    üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω")
            print()

        # 2. –¢–û–ü-15 –Ω–∞–π–ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—à–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        print("=" * 60)
        print("üí∞ –¢–û–ü-15 –ù–ê–ô–ü–†–ò–ë–£–¢–ö–û–í–Ü–®–ò–• –¢–û–í–ê–†–Ü–í:")
        print("-" * 60)

        top_by_revenue_query = (
            select(
                Product.product_name,
                Product.category_name,
                func.sum(TransactionProduct.sum).label("total_revenue"),
                func.sum(TransactionProduct.count).label("total_quantity"),
                func.count(TransactionProduct.id).label("order_count"),
                func.avg(TransactionProduct.sum / TransactionProduct.count).label(
                    "avg_price"
                ),
            )
            .select_from(Product)
            .join(
                TransactionProduct,
                Product.poster_product_id == TransactionProduct.poster_product_id,
            )
            .group_by(Product.product_name, Product.category_name)
            .order_by(desc("total_revenue"))
            .limit(15)
        )

        revenue_result = await session.execute(top_by_revenue_query)
        top_revenue = revenue_result.all()

        for i, product in enumerate(top_revenue, 1):
            total_rev = float(product.total_revenue)
            avg_price = float(product.avg_price or 0)

            print(f"{i:2d}. {product.product_name}")
            print(f"    üìÇ {product.category_name}")
            print(f"    üí∞ –û–±–æ—Ä–æ—Ç: {total_rev:,.2f} –≥—Ä–Ω")
            print(f"    üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product.total_quantity} —à—Ç")
            print(f"    üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω")
            print()

        # 3. –ê–Ω–∞–ª—ñ–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        print("=" * 60)
        print("üìÇ –ê–ù–ê–õ–Ü–ó –ü–û –ö–ê–¢–ï–ì–û–†–Ü–Ø–•:")
        print("-" * 60)

        category_query = (
            select(
                Product.category_name,
                func.count(func.distinct(Product.poster_product_id)).label(
                    "unique_products"
                ),
                func.sum(TransactionProduct.count).label("total_quantity"),
                func.sum(TransactionProduct.sum).label("total_revenue"),
                func.avg(TransactionProduct.sum / TransactionProduct.count).label(
                    "avg_price"
                ),
            )
            .select_from(Product)
            .join(
                TransactionProduct,
                Product.poster_product_id == TransactionProduct.poster_product_id,
            )
            .group_by(Product.category_name)
            .order_by(desc("total_revenue"))
        )

        category_result = await session.execute(category_query)
        categories = category_result.all()

        for i, category in enumerate(categories, 1):
            total_rev = float(category.total_revenue)
            avg_price = float(category.avg_price or 0)

            print(f"{i:2d}. {category.category_name}")
            print(f"    üè∑Ô∏è  –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {category.unique_products}")
            print(f"    üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {category.total_quantity} —à—Ç")
            print(f"    üí∞ –û–±–æ—Ä–æ—Ç: {total_rev:,.2f} –≥—Ä–Ω")
            print(f"    üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω")
            print()

        # 4. –¢–æ–≤–∞—Ä–∏ –∑ –Ω–∞–π–≤–∏—â–æ—é —Å–µ—Ä–µ–¥–Ω—å–æ—é —Ü—ñ–Ω–æ—é (—Ç–æ–ø-10)
        print("=" * 60)
        print("üíé –¢–û–ü-10 –ù–ê–ô–î–û–†–û–ñ–ß–ò–• –¢–û–í–ê–†–Ü–í (–∑–∞ —Å–µ—Ä–µ–¥–Ω—å–æ—é —Ü—ñ–Ω–æ—é):")
        print("-" * 60)

        expensive_query = (
            select(
                Product.product_name,
                Product.category_name,
                func.avg(TransactionProduct.sum / TransactionProduct.count).label(
                    "avg_price"
                ),
                func.sum(TransactionProduct.count).label("total_quantity"),
                func.sum(TransactionProduct.sum).label("total_revenue"),
            )
            .select_from(Product)
            .join(
                TransactionProduct,
                Product.poster_product_id == TransactionProduct.poster_product_id,
            )
            .group_by(Product.product_name, Product.category_name)
            .having(func.sum(TransactionProduct.count) >= 10)  # –ú—ñ–Ω—ñ–º—É–º 10 –ø—Ä–æ–¥–∞–∂—ñ–≤
            .order_by(desc("avg_price"))
            .limit(10)
        )

        expensive_result = await session.execute(expensive_query)
        expensive_products = expensive_result.all()

        for i, product in enumerate(expensive_products, 1):
            avg_price = float(product.avg_price)
            total_rev = float(product.total_revenue)

            print(f"{i:2d}. {product.product_name}")
            print(f"    üìÇ {product.category_name}")
            print(f"    üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞: {avg_price:.2f} –≥—Ä–Ω")
            print(f"    üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {product.total_quantity} —à—Ç")
            print(f"    üí∞ –û–±–æ—Ä–æ—Ç: {total_rev:,.2f} –≥—Ä–Ω")
            print()

        # 5. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("=" * 60)
        print("üéØ –ó–ê–ì–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–û–í–ê–†–ê–•:")
        print("-" * 60)

        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_stats_query = (
            select(
                func.count(func.distinct(Product.poster_product_id)).label(
                    "unique_products"
                ),
                func.sum(TransactionProduct.count).label("total_quantity"),
                func.sum(TransactionProduct.sum).label("total_revenue"),
                func.avg(TransactionProduct.sum / TransactionProduct.count).label(
                    "avg_price"
                ),
                func.count(TransactionProduct.id).label("total_orders"),
            )
            .select_from(Product)
            .join(
                TransactionProduct,
                Product.poster_product_id == TransactionProduct.poster_product_id,
            )
        )

        stats_result = await session.execute(total_stats_query)
        stats = stats_result.first()

        if stats:
            print(f"üè∑Ô∏è  –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {stats.unique_products}")
            print(f"üì¶ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {stats.total_quantity:,} —à—Ç")
            print(f"üî¢ –í—Å—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω—å: {stats.total_orders:,}")
            print(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±–æ—Ä–æ—Ç: {float(stats.total_revenue):,.2f} –≥—Ä–Ω")
            print(f"üíµ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: {float(stats.avg_price):.2f} –≥—Ä–Ω")


if __name__ == "__main__":
    asyncio.run(analyze_products_sales())
