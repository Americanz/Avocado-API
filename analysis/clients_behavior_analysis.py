#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ —ó—Ö –ø–æ–∫—É–ø–æ–∫
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


async def analyze_clients_behavior():
    """–ê–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    from src.core.database.connection import AsyncSessionLocal
    from src.features.telegram_bot.models.client import Client
    from src.features.telegram_bot.models.transaction import Transaction
    from src.features.telegram_bot.models.spot import Spot
    from sqlalchemy import select, func, desc, and_, text

    async with AsyncSessionLocal() as session:
        print("üë• –ê–ù–ê–õ–Ü–ó –ö–õ–Ü–Ñ–ù–¢–Ü–í –Ü –á–• –ü–û–ö–£–ü–û–ö")
        print("=" * 60)

        # 1. –¢–û–ü-20 VIP –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–∞ —Å—É–º–æ—é –ø–æ–∫—É–ø–æ–∫
        print("üíé –¢–û–ü-20 VIP –ö–õ–Ü–Ñ–ù–¢–Ü–í –ó–ê –°–£–ú–û–Æ –ü–û–ö–£–ü–û–ö:")
        print("-" * 60)

        vip_clients_query = (
            select(
                Client.firstname,
                Client.lastname,
                Client.phone,
                Client.card_number,
                func.count(Transaction.id).label("total_transactions"),
                func.sum(Transaction.sum).label("total_spent"),
                func.avg(Transaction.sum).label("avg_transaction"),
                func.max(Transaction.sum).label("max_transaction"),
                func.min(Transaction.date_close).label("first_purchase"),
                func.max(Transaction.date_close).label("last_purchase"),
            )
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .group_by(
                Client.client_id,
                Client.firstname,
                Client.lastname,
                Client.phone,
                Client.card_number,
            )
            .order_by(desc("total_spent"))
            .limit(20)
        )

        vip_result = await session.execute(vip_clients_query)
        vip_clients = vip_result.all()

        for i, client in enumerate(vip_clients, 1):
            total_spent = float(client.total_spent)
            avg_trans = float(client.avg_transaction)
            max_trans = float(client.max_transaction)

            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞
            client_name = f"{client.firstname or ''} {client.lastname or ''}".strip()
            if not client_name:
                client_name = "–ë–µ–∑ —ñ–º–µ–Ω—ñ"

            # –û–±—á–∏—Å–ª—é—î–º–æ –ø–µ—Ä—ñ–æ–¥ –∫–ª—ñ—î–Ω—Ç–∞
            if client.first_purchase and client.last_purchase:
                period = (client.last_purchase - client.first_purchase).days
                period_text = f"{period} –¥–Ω—ñ–≤" if period > 0 else "–Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç"
            else:
                period_text = "–Ω/–¥"

            print(f"{i:2d}. {client_name}")
            print(f"    üìû {client.phone or '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É'}")
            print(f"    üè∑Ô∏è  –ö–∞—Ä—Ç–∫–∞: {client.card_number or '–ë–µ–∑ –∫–∞—Ä—Ç–∫–∏'}")
            print(f"    üí∞ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:,.2f} –≥—Ä–Ω")
            print(f"    üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {client.total_transactions}")
            print(f"    üìä –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_trans:.2f} –≥—Ä–Ω")
            print(f"    ‚¨ÜÔ∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–µ–∫: {max_trans:.2f} –≥—Ä–Ω")
            print(f"    üìÖ –ü–µ—Ä—ñ–æ–¥: {period_text}")
            print()

        # 2. –ê–Ω–∞–ª—ñ–∑ –ø–æ —á–∞—Å—Ç–æ—Ç—ñ –ø–æ–∫—É–ø–æ–∫
        print("=" * 60)
        print("üîÑ –ê–ù–ê–õ–Ü–ó –ü–û –ß–ê–°–¢–û–¢–Ü –ü–û–ö–£–ü–û–ö:")
        print("-" * 60)

        frequency_query = (
            select(
                func.count(Transaction.id).label("transaction_count"),
                func.count(func.distinct(Client.client_id)).label("client_count"),
            )
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .group_by(Client.client_id)
            .subquery()
        )

        frequency_stats_query = (
            select(
                frequency_query.c.transaction_count,
                func.count().label("clients_with_this_frequency"),
            )
            .select_from(frequency_query)
            .group_by(frequency_query.c.transaction_count)
            .order_by(frequency_query.c.transaction_count)
        )

        freq_result = await session.execute(frequency_stats_query)
        frequency_data = freq_result.all()

        print("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ | –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤")
        print("-" * 40)

        total_clients = 0
        for freq in frequency_data[:15]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 15
            total_clients += freq.clients_with_this_frequency
            print(
                f"{freq.transaction_count:15d} | {freq.clients_with_this_frequency:16d}"
            )

        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 15 –ø–æ–∫—É–ø–∫–∞–º–∏
        many_purchases = sum(
            freq.clients_with_this_frequency for freq in frequency_data[15:]
        )
        if many_purchases > 0:
            print(f"{'15+':>15} | {many_purchases:16d}")

        print(f"\nüìä –í—Å—å–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {total_clients:,}")

        # 3. –°–µ–≥–º–µ–Ω—Ç–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        print("\n" + "=" * 60)
        print("üéØ –°–ï–ì–ú–ï–ù–¢–ê–¶–Ü–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í:")
        print("-" * 60)

        # VIP –∫–ª—ñ—î–Ω—Ç–∏ (–±—ñ–ª—å—à–µ 5000 –≥—Ä–Ω)
        vip_count_query = (
            select(func.count(func.distinct(Client.client_id)).label("vip_count"))
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .group_by(Client.client_id)
            .having(func.sum(Transaction.sum) >= 5000)
        )

        # –†–µ–≥—É–ª—è—Ä–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ (5+ –ø–æ–∫—É–ø–æ–∫)
        regular_count_query = (
            select(func.count(func.distinct(Client.client_id)).label("regular_count"))
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .group_by(Client.client_id)
            .having(func.count(Transaction.id) >= 5)
        )

        # –ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ (1-2 –ø–æ–∫—É–ø–∫–∏)
        new_count_query = (
            select(func.count(func.distinct(Client.client_id)).label("new_count"))
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .group_by(Client.client_id)
            .having(func.count(Transaction.id) <= 2)
        )

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç–∏
        vip_result = await session.execute(
            select(func.count()).select_from(vip_count_query.subquery())
        )
        regular_result = await session.execute(
            select(func.count()).select_from(regular_count_query.subquery())
        )
        new_result = await session.execute(
            select(func.count()).select_from(new_count_query.subquery())
        )

        vip_count = vip_result.scalar() or 0
        regular_count = regular_result.scalar() or 0
        new_count = new_result.scalar() or 0

        print(f"üíé VIP –∫–ª—ñ—î–Ω—Ç–∏ (>5000 –≥—Ä–Ω): {vip_count}")
        print(f"üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ (5+ –ø–æ–∫—É–ø–æ–∫): {regular_count}")
        print(f"üÜï –ù–æ–≤—ñ –∫–ª—ñ—î–Ω—Ç–∏ (1-2 –ø–æ–∫—É–ø–∫–∏): {new_count}")

        # 4. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–æ—á–∫–∞–º –ø—Ä–æ–¥–∞–∂—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
        print("\n" + "=" * 60)
        print("üè™ –£–õ–Æ–ë–õ–ï–ù–Ü –¢–û–ß–ö–ò –ü–†–û–î–ê–ñ–£ –ö–õ–Ü–Ñ–ù–¢–Ü–í:")
        print("-" * 60)

        spot_preference_query = (
            select(
                Spot.name.label("spot_name"),
                func.count(func.distinct(Client.client_id)).label("unique_clients"),
                func.count(Transaction.id).label("total_transactions"),
                func.avg(Transaction.sum).label("avg_check"),
            )
            .select_from(Spot)
            .join(Transaction, Spot.spot_id == Transaction.spot_id)
            .join(
                Client,
                Transaction.client == Client.client_id,
            )
            .group_by(Spot.name)
            .order_by(desc("unique_clients"))
        )

        spot_pref_result = await session.execute(spot_preference_query)
        spot_preferences = spot_pref_result.all()

        for i, spot in enumerate(spot_preferences, 1):
            avg_check = float(spot.avg_check)

            print(f"{i:2d}. {spot.spot_name}")
            print(f"    üë• –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {spot.unique_clients}")
            print(f"    üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {spot.total_transactions}")
            print(f"    üí∞ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_check:.2f} –≥—Ä–Ω")
            print()

        # 5. –ê–Ω–∞–ª—ñ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
        print("=" * 60)
        print("üìÖ –ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –ó–ê –û–°–¢–ê–ù–ù–Ü–ô –ú–Ü–°–Ø–¶–¨:")
        print("-" * 60)

        month_ago = datetime.now() - timedelta(days=30)

        monthly_activity_query = (
            select(
                func.count(func.distinct(Client.client_id)).label("active_clients"),
                func.count(Transaction.id).label("transactions"),
                func.sum(Transaction.sum).label("revenue"),
                func.avg(Transaction.sum).label("avg_check"),
            )
            .select_from(Client)
            .join(
                Transaction,
                Client.client_id == Transaction.client,
            )
            .where(Transaction.date_close >= month_ago)
        )

        monthly_result = await session.execute(monthly_activity_query)
        monthly_stats = monthly_result.first()

        if monthly_stats:
            revenue = float(monthly_stats.revenue or 0)
            avg_check = float(monthly_stats.avg_check or 0)

            print(f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: {monthly_stats.active_clients or 0}")
            print(f"üìã –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {monthly_stats.transactions or 0}")
            print(f"üí∞ –û–±–æ—Ä–æ—Ç: {revenue:,.2f} –≥—Ä–Ω")
            print(f"üíµ –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_check:.2f} –≥—Ä–Ω")


if __name__ == "__main__":
    asyncio.run(analyze_clients_behavior())
