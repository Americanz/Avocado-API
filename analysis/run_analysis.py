#!/usr/bin/env python3
"""
–ì–æ–ª–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import argparse

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–Ω–µ–≤—É –ø–∞–ø–∫—É –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


async def run_all_analysis():
    """–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ"""

    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–í–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£ –ü–†–û–î–ê–ñ–Ü–í")
    print("=" * 80)
    print(f"‚è∞ –ü–æ—á–∞—Ç–æ–∫: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)

    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –∞–Ω–∞–ª—ñ–∑–∏
    try:
        from analysis.comprehensive_sales_analysis import comprehensive_sales_analysis
        from analysis.sales_by_spots_analysis import analyze_sales_by_spots
        from analysis.products_sales_analysis import analyze_products_sales
        from analysis.clients_behavior_analysis import analyze_clients_behavior
        from analysis.sales_trends_analysis import analyze_sales_trends
        from analysis.bonus_analysis import bonus_analysis
        from analysis.corrected_bonus_analysis import corrected_bonus_analysis
        from analysis.simple_bonus_analysis import simple_bonus_analysis
        from analysis.deep_duplicate_analysis import deep_duplicate_analysis
        from analysis.detailed_phone_analysis import detailed_phone_analysis
        from analysis.extended_phone_analysis import extended_phone_analysis

        # 1. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ (–∑–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥)
        print("\nüéØ 1/10: –ó–ê–ì–ê–õ–¨–ù–ò–ô –û–ì–õ–Ø–î")
        print("-" * 40)
        await comprehensive_sales_analysis()

        # 2. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–æ—á–∫–∞—Ö –ø—Ä–æ–¥–∞–∂—É
        print("\nüè™ 2/10: –ê–ù–ê–õ–Ü–ó –ü–û –¢–û–ß–ö–ê–• –ü–†–û–î–ê–ñ–£")
        print("-" * 40)
        await analyze_sales_by_spots()

        # 3. –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö
        print("\nüõçÔ∏è  3/10: –ê–ù–ê–õ–Ü–ó –ü–û –¢–û–í–ê–†–ê–•")
        print("-" * 40)
        await analyze_products_sales()

        # 4. –ê–Ω–∞–ª—ñ–∑ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        print("\nüë• 4/10: –ê–ù–ê–õ–Ü–ó –ö–õ–Ü–Ñ–ù–¢–Ü–í")
        print("-" * 40)
        await analyze_clients_behavior()

        # 5. –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤
        print("\nüìà 5/10: –ê–ù–ê–õ–Ü–ó –¢–†–ï–ù–î–Ü–í")
        print("-" * 40)
        await analyze_sales_trends()

        # 6. –ê–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤ (–æ—Å–Ω–æ–≤–Ω–∏–π)
        print("\nüí∞ 6/10: –ê–ù–ê–õ–Ü–ó –ë–û–ù–£–°–Ü–í")
        print("-" * 40)
        await bonus_analysis()

        # 7. –°–∫–æ—Ä–µ–≥–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤
        print("\nüíé 7/10: –°–ö–û–†–ï–ì–û–í–ê–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ë–û–ù–£–°–Ü–í")
        print("-" * 40)
        await corrected_bonus_analysis()

        # 8. –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤
        print("\nüíµ 8/10: –ü–†–û–°–¢–ò–ô –ê–ù–ê–õ–Ü–ó –ë–û–ù–£–°–Ü–í")
        print("-" * 40)
        await simple_bonus_analysis()

        # 9. –ì–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        print("\nüîç 9/10: –ê–ù–ê–õ–Ü–ó –î–£–ë–õ–Ü–ö–ê–¢–Ü–í –ö–õ–Ü–Ñ–ù–¢–Ü–í")
        print("-" * 40)
        await deep_duplicate_analysis()

        # 10. –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
        print("\nüì± 10/10: –ê–ù–ê–õ–Ü–ó –¢–ï–õ–ï–§–û–ù–ù–ò–• –ù–û–ú–ï–†–Ü–í")
        print("-" * 40)
        await detailed_phone_analysis()

        # –î–æ–¥–∞—Ç–∫–æ–≤–∏–π: –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
        print("\nüìû –î–û–î–ê–¢–ö–û–í–û: –†–û–ó–®–ò–†–ï–ù–ò–ô –ê–ù–ê–õ–Ü–ó –¢–ï–õ–ï–§–û–ù–Ü–í")
        print("-" * 40)
        await extended_phone_analysis()

        print("\n" + "=" * 80)
        print("‚úÖ –£–°–Ü –ê–ù–ê–õ–Ü–ó–ò –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print(f"‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 80)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∞–Ω–∞–ª—ñ–∑—É: {e}")
        import traceback

        traceback.print_exc()


def run_single_analysis(analysis_name):
    """–ó–∞–ø—É—Å–∫ –æ–∫—Ä–µ–º–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"""

    analyses = {
        "comprehensive": (
            "comprehensive_sales_analysis",
            "comprehensive_sales_analysis",
        ),
        "spots": ("sales_by_spots_analysis", "analyze_sales_by_spots"),
        "products": ("products_sales_analysis", "analyze_products_sales"),
        "clients": ("clients_behavior_analysis", "analyze_clients_behavior"),
        "trends": ("sales_trends_analysis", "analyze_sales_trends"),
        "bonus": ("bonus_analysis", "bonus_analysis"),
        "bonus-corrected": ("corrected_bonus_analysis", "corrected_bonus_analysis"),
        "bonus-simple": ("simple_bonus_analysis", "simple_bonus_analysis"),
        "duplicates": ("deep_duplicate_analysis", "deep_duplicate_analysis"),
        "phones": ("detailed_phone_analysis", "detailed_phone_analysis"),
        "phones-extended": ("extended_phone_analysis", "extended_phone_analysis"),
    }

    if analysis_name not in analyses:
        print(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –∞–Ω–∞–ª—ñ–∑: {analysis_name}")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏: {', '.join(analyses.keys())}")
        return

    module_name, function_name = analyses[analysis_name]

    try:
        # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
        module = __import__(f"analysis.{module_name}", fromlist=[function_name])
        analysis_function = getattr(module, function_name)

        print(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É: {analysis_name}")
        print("=" * 50)
        asyncio.run(analysis_function())
        print("=" * 50)
        print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É {analysis_name}: {e}")
        import traceback

        traceback.print_exc()


def show_help():
    """–ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏ –ø–æ –¥–æ—Å—Ç—É–ø–Ω–∏–º –∞–Ω–∞–ª—ñ–∑–∞–º"""

    print("üöÄ –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–Ü–ó–£ –ü–†–û–î–ê–ñ–Ü–í AVOCADO")
    print("=" * 60)
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ñ –∞–Ω–∞–ª—ñ–∑–∏:")
    print()

    print("üìà –û–°–ù–û–í–ù–Ü –ê–ù–ê–õ–Ü–ó–ò:")
    print("  comprehensive     - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –æ–≥–ª—è–¥ –ø—Ä–æ–¥–∞–∂—ñ–≤")
    print("  spots            - –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–æ—á–∫–∞—Ö –ø—Ä–æ–¥–∞–∂—É")
    print("  products         - –ê–Ω–∞–ª—ñ–∑ –ø–æ —Ç–æ–≤–∞—Ä–∞—Ö")
    print("  clients          - –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    print("  trends           - –¢—Ä–µ–Ω–¥–∏ –ø—Ä–æ–¥–∞–∂—ñ–≤")
    print()

    print("üí∞ –ê–ù–ê–õ–Ü–ó –ë–û–ù–£–°–Ü–í:")
    print("  bonus            - –û—Å–Ω–æ–≤–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤")
    print("  bonus-corrected  - –°–∫–æ—Ä–µ–≥–æ–≤–∞–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤")
    print("  bonus-simple     - –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–æ–Ω—É—Å—ñ–≤")
    print()

    print("üîç –ê–ù–ê–õ–Ü–ó –Ø–ö–û–°–¢–Ü –î–ê–ù–ò–•:")
    print("  duplicates       - –ü–æ—à—É–∫ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç—ñ–≤")
    print("  phones           - –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤")
    print("  phones-extended  - –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤")
    print()

    print("üí° –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:")
    print("  python run_analysis.py                    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤")
    print("  python run_analysis.py comprehensive      # –û–∫—Ä–µ–º–∏–π –∞–Ω–∞–ª—ñ–∑")
    print("  python run_analysis.py help               # –¶—è –¥–æ–≤—ñ–¥–∫–∞")
    print("=" * 60)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""

    if len(sys.argv) > 1:
        analysis_name = sys.argv[1].lower()

        if analysis_name in ["help", "--help", "-h"]:
            show_help()
        else:
            # –ó–∞–ø—É—Å–∫ –æ–∫—Ä–µ–º–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            run_single_analysis(analysis_name)
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤
        asyncio.run(run_all_analysis())


if __name__ == "__main__":
    main()
