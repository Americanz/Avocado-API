#!/usr/bin/env python3
"""
–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ —ñ –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))


async def analyze_sales_trends():
    """–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –ø—Ä–æ–¥–∞–∂—ñ–≤"""
    from src.core.database.connection import AsyncSessionLocal
    from src.features.telegram_bot.models.spot import Spot
    from src.features.telegram_bot.models.transaction import Transaction
    from src.features.telegram_bot.models.client import Client
    from sqlalchemy import select, func, desc, and_, text

    async with AsyncSessionLocal() as session:
        print("üìà –ê–ù–ê–õ–Ü–ó –¢–†–ï–ù–î–Ü–í –ü–†–û–î–ê–ñ–Ü–í")
        print("=" * 60)

        # 1. –¢—Ä–µ–Ω–¥–∏ –ø–æ –¥–Ω—è—Ö —Ç–∏–∂–Ω—è
        print("üìÖ –ê–ù–ê–õ–Ü–ó –ü–û –î–ù–Ø–• –¢–ò–ñ–ù–Ø:")
        print("-" * 60)

        # PostgreSQL: 1=–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 7=–ù–µ–¥—ñ–ª—è
        weekday_query = (
            select(
                func.extract("dow", Transaction.date_close).label("day_of_week"),
                func.count(Transaction.id).label("transactions"),
                func.sum(Transaction.sum).label("revenue"),
                func.avg(Transaction.sum).label("avg_check"),
                func.count(func.distinct(Transaction.client)).label("unique_clients"),
            )
            .group_by(func.extract("dow", Transaction.date_close))
            .order_by("day_of_week")
        )

        weekday_result = await session.execute(weekday_query)
        weekday_data = weekday_result.all()

        weekdays = [
            "–ù–µ–¥—ñ–ª—è",
            "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
            "–í—ñ–≤—Ç–æ—Ä–æ–∫",
            "–°–µ—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä",
            "–ü'—è—Ç–Ω–∏—Ü—è",
            "–°—É–±–æ—Ç–∞",
        ]

        print("–î–µ–Ω—å —Ç–∏–∂–Ω—è   | –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π | –û–±–æ—Ä–æ—Ç (–≥—Ä–Ω) | –°–µ—Ä–µ–¥. —á–µ–∫ | –ö–ª—ñ—î–Ω—Ç—ñ–≤")
        print("-" * 70)

        total_week_revenue = 0
        total_week_transactions = 0

        for day_data in weekday_data:
            day_num = int(day_data.day_of_week)
            day_name = weekdays[day_num]
            revenue = float(day_data.revenue or 0)
            avg_check = float(day_data.avg_check or 0)

            total_week_revenue += revenue
            total_week_transactions += day_data.transactions

            print(
                f"{day_name:12} | {day_data.transactions:>10,} | {revenue:>11,.0f} | {avg_check:>9.2f} | {day_data.unique_clients:>7}"
            )

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —ñ –Ω–∞–π–≥—ñ—Ä—à–∏–π –¥–Ω—ñ
        best_day = max(weekday_data, key=lambda x: float(x.revenue or 0))
        worst_day = min(weekday_data, key=lambda x: float(x.revenue or 0))

        print(
            f"\nüèÜ –ù–∞–π–∫—Ä–∞—â–∏–π –¥–µ–Ω—å: {weekdays[int(best_day.day_of_week)]} ({float(best_day.revenue):,.0f} –≥—Ä–Ω)"
        )
        print(
            f"üìâ –ù–∞–π–≥—ñ—Ä—à–∏–π –¥–µ–Ω—å: {weekdays[int(worst_day.day_of_week)]} ({float(worst_day.revenue):,.0f} –≥—Ä–Ω)"
        )

        # 2. –¢—Ä–µ–Ω–¥–∏ –ø–æ –≥–æ–¥–∏–Ω–∞—Ö
        print("\n" + "=" * 60)
        print("üïê –ê–ù–ê–õ–Ü–ó –ü–û –ì–û–î–ò–ù–ê–• –î–ù–Ø:")
        print("-" * 60)

        hourly_query = (
            select(
                func.extract("hour", Transaction.date_close).label("hour"),
                func.count(Transaction.id).label("transactions"),
                func.sum(Transaction.sum).label("revenue"),
                func.avg(Transaction.sum).label("avg_check"),
            )
            .group_by(func.extract("hour", Transaction.date_close))
            .order_by("hour")
        )

        hourly_result = await session.execute(hourly_query)
        hourly_data = hourly_result.all()

        print("–ì–æ–¥–∏–Ω–∞ | –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π | –û–±–æ—Ä–æ—Ç (–≥—Ä–Ω) | –°–µ—Ä–µ–¥. —á–µ–∫")
        print("-" * 50)

        peak_hours = []
        for hour_data in hourly_data:
            hour = int(hour_data.hour)
            revenue = float(hour_data.revenue or 0)
            avg_check = float(hour_data.avg_check or 0)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏ (–±—ñ–ª—å—à–µ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ)
            if (
                hour_data.transactions
                > total_week_transactions / len(weekday_data) / 24
            ):
                peak_hours.append(hour)

            print(
                f"{hour:2d}:00 | {hour_data.transactions:>10,} | {revenue:>11,.0f} | {avg_check:>9.2f}"
            )

        print(f"\n‚ö° –ü—ñ–∫–æ–≤—ñ –≥–æ–¥–∏–Ω–∏: {', '.join(f'{h}:00' for h in peak_hours)}")

        # 3. –ú—ñ—Å—è—á–Ω–∞ –¥–∏–Ω–∞–º—ñ–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ú–Ü–°–Ø–ß–ù–ê –î–ò–ù–ê–ú–Ü–ö–ê (–æ—Å—Ç–∞–Ω–Ω—ñ 12 –º—ñ—Å—è—Ü—ñ–≤):")
        print("-" * 60)

        year_ago = datetime.now() - timedelta(days=365)

        monthly_trend_query = (
            select(
                func.extract("year", Transaction.date_close).label("year"),
                func.extract("month", Transaction.date_close).label("month"),
                func.count(Transaction.id).label("transactions"),
                func.sum(Transaction.sum).label("revenue"),
                func.count(func.distinct(Transaction.client)).label("unique_clients"),
                func.avg(Transaction.sum).label("avg_check"),
            )
            .where(Transaction.date_close >= year_ago)
            .group_by(
                func.extract("year", Transaction.date_close),
                func.extract("month", Transaction.date_close),
            )
            .order_by("year", "month")
        )

        monthly_result = await session.execute(monthly_trend_query)
        monthly_trend = monthly_result.all()

        print("–ú—ñ—Å—è—Ü—å      | –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π | –û–±–æ—Ä–æ—Ç (–≥—Ä–Ω) | –†—ñ—Å—Ç –æ–±–æ—Ä–æ—Ç—É | –ö–ª—ñ—î–Ω—Ç—ñ–≤")
        print("-" * 70)

        prev_revenue = None
        for month_data in monthly_trend:
            month_name = f"{int(month_data.year)}-{int(month_data.month):02d}"
            revenue = float(month_data.revenue or 0)

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä—ñ—Å—Ç
            if prev_revenue is not None and prev_revenue > 0:
                growth = ((revenue - prev_revenue) / prev_revenue) * 100
                growth_str = f"{growth:+.1f}%"
            else:
                growth_str = "–Ω/–¥"

            print(
                f"{month_name:11} | {month_data.transactions:>10,} | {revenue:>11,.0f} | {growth_str:>11} | {month_data.unique_clients:>7}"
            )
            prev_revenue = revenue

        # 4. –°–µ–∑–æ–Ω–Ω—ñ—Å—Ç—å
        print("\n" + "=" * 60)
        print("üåü –ê–ù–ê–õ–Ü–ó –°–ï–ó–û–ù–ù–û–°–¢–Ü:")
        print("-" * 60)

        seasonal_query = (
            select(
                func.extract("month", Transaction.date_close).label("month"),
                func.count(Transaction.id).label("transactions"),
                func.sum(Transaction.sum).label("revenue"),
                func.avg(Transaction.sum).label("avg_check"),
            )
            .group_by(func.extract("month", Transaction.date_close))
            .order_by("month")
        )

        seasonal_result = await session.execute(seasonal_query)
        seasonal_data = seasonal_result.all()

        months = [
            "–°—ñ—á–µ–Ω—å",
            "–õ—é—Ç–∏–π",
            "–ë–µ—Ä–µ–∑–µ–Ω—å",
            "–ö–≤—ñ—Ç–µ–Ω—å",
            "–¢—Ä–∞–≤–µ–Ω—å",
            "–ß–µ—Ä–≤–µ–Ω—å",
            "–õ–∏–ø–µ–Ω—å",
            "–°–µ—Ä–ø–µ–Ω—å",
            "–í–µ—Ä–µ—Å–µ–Ω—å",
            "–ñ–æ–≤—Ç–µ–Ω—å",
            "–õ–∏—Å—Ç–æ–ø–∞–¥",
            "–ì—Ä—É–¥–µ–Ω—å",
        ]

        print("–ú—ñ—Å—è—Ü—å     | –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π | –û–±–æ—Ä–æ—Ç (–≥—Ä–Ω) | –°–µ—Ä–µ–¥. —á–µ–∫")
        print("-" * 55)

        seasonal_revenues = []
        for month_data in seasonal_data:
            month_num = int(month_data.month) - 1
            month_name = months[month_num]
            revenue = float(month_data.revenue or 0)
            avg_check = float(month_data.avg_check or 0)
            seasonal_revenues.append((month_name, revenue))

            print(
                f"{month_name:10} | {month_data.transactions:>10,} | {revenue:>11,.0f} | {avg_check:>9.2f}"
            )

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —ñ –Ω–∞–π–≥—ñ—Ä—à–∏–π –º—ñ—Å—è—Ü—ñ
        if seasonal_revenues:
            best_month = max(seasonal_revenues, key=lambda x: x[1])
            worst_month = min(seasonal_revenues, key=lambda x: x[1])

            print(f"\nüèÜ –ù–∞–π–∫—Ä–∞—â–∏–π –º—ñ—Å—è—Ü—å: {best_month[0]} ({best_month[1]:,.0f} –≥—Ä–Ω)")
            print(f"üìâ –ù–∞–π–≥—ñ—Ä—à–∏–π –º—ñ—Å—è—Ü—å: {worst_month[0]} ({worst_month[1]:,.0f} –≥—Ä–Ω)")

        # 5. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å
        print("\n" + "=" * 60)
        print("üîÆ –ü–†–û–°–¢–ò–ô –ü–†–û–ì–ù–û–ó –ù–ê –ù–ê–°–¢–£–ü–ù–ò–ô –ú–Ü–°–Ø–¶–¨:")
        print("-" * 60)

        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
        recent_months = monthly_trend[-3:] if len(monthly_trend) >= 3 else monthly_trend

        if len(recent_months) >= 2:
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ—Å—Ç
            growths = []
            for i in range(1, len(recent_months)):
                prev_rev = float(recent_months[i - 1].revenue or 0)
                curr_rev = float(recent_months[i].revenue or 0)
                if prev_rev > 0:
                    growth = (curr_rev - prev_rev) / prev_rev
                    growths.append(growth)

            if growths:
                avg_growth = sum(growths) / len(growths)
                last_month_revenue = float(recent_months[-1].revenue or 0)
                predicted_revenue = last_month_revenue * (1 + avg_growth)

                print(f"üìä –û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å: {last_month_revenue:,.0f} –≥—Ä–Ω")
                print(f"üìà –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ—Å—Ç: {avg_growth*100:+.1f}%")
                print(f"üéØ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å: {predicted_revenue:,.0f} –≥—Ä–Ω")

                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                if avg_growth > 0.05:  # 5% —Ä—ñ—Å—Ç
                    print("‚úÖ –¢—Ä–µ–Ω–¥: –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π —Ä—ñ—Å—Ç")
                elif avg_growth < -0.05:  # 5% —Å–ø–∞–¥
                    print("‚ö†Ô∏è  –¢—Ä–µ–Ω–¥: –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π, –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∑–∞—Ö–æ–¥–∏")
                else:
                    print("‚û°Ô∏è  –¢—Ä–µ–Ω–¥: –°—Ç–∞–±—ñ–ª—å–Ω–∏–π")


if __name__ == "__main__":
    asyncio.run(analyze_sales_trends())
