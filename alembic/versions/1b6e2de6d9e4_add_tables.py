"""add_tables

Revision ID: 1b6e2de6d9e4
Revises: 
Create Date: 2025-08-31 22:17:29.231279

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1b6e2de6d9e4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('clients',
    sa.Column('client_id', sa.BigInteger(), nullable=False, comment='Poster client ID'),
    sa.Column('firstname', sa.String(length=100), nullable=True, comment='Client first name'),
    sa.Column('lastname', sa.String(length=100), nullable=True, comment='Client last name'),
    sa.Column('patronymic', sa.String(length=100), nullable=True, comment='Client patronymic'),
    sa.Column('phone', sa.String(length=20), nullable=True, comment='Client phone'),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment='Phone number without +'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Client email'),
    sa.Column('birthday', sa.String(length=20), nullable=True, comment='Client birthday (YYYY-MM-DD)'),
    sa.Column('client_sex', sa.String(length=10), nullable=True, comment='Client gender (0/1)'),
    sa.Column('country', sa.String(length=100), nullable=True, comment='Country'),
    sa.Column('city', sa.String(length=100), nullable=True, comment='City'),
    sa.Column('address', sa.Text(), nullable=True, comment='Full address'),
    sa.Column('addresses', sa.JSON(), nullable=True, comment='Array of addresses'),
    sa.Column('card_number', sa.String(length=50), nullable=True, comment='Card number'),
    sa.Column('comment', sa.Text(), nullable=True, comment='Comment about client'),
    sa.Column('discount_per', sa.Numeric(precision=5, scale=2), nullable=True, comment='Personal discount percentage'),
    sa.Column('bonus', sa.Numeric(precision=10, scale=2), nullable=True, comment='Current bonus balance'),
    sa.Column('total_payed_sum', sa.Numeric(precision=10, scale=2), nullable=True, comment='Total paid amount'),
    sa.Column('client_groups_id', sa.Integer(), nullable=True, comment='Client group ID'),
    sa.Column('client_groups_name', sa.String(length=255), nullable=True, comment='Client group name'),
    sa.Column('client_groups_discount', sa.Numeric(precision=5, scale=2), nullable=True, comment='Group discount percentage'),
    sa.Column('loyalty_type', sa.Integer(), nullable=True, comment='Loyalty type'),
    sa.Column('birthday_bonus', sa.Numeric(precision=10, scale=2), nullable=True, comment='Birthday bonus amount'),
    sa.Column('date_activale', sa.DateTime(), nullable=True, comment='Activation date'),
    sa.Column('delete', sa.Boolean(), nullable=True, comment='Is deleted'),
    sa.Column('ewallet', sa.Numeric(precision=10, scale=2), nullable=True, comment='E-wallet balance'),
    sa.Column('telegram_user_id', sa.BigInteger(), nullable=True, comment='Linked Telegram user ID'),
    sa.Column('telegram_username', sa.String(length=255), nullable=True, comment='Telegram @username'),
    sa.Column('telegram_first_name', sa.String(length=255), nullable=True, comment='Telegram first name'),
    sa.Column('telegram_last_name', sa.String(length=255), nullable=True, comment='Telegram last name'),
    sa.Column('telegram_language_code', sa.String(length=10), nullable=True, comment='Telegram language'),
    sa.Column('is_telegram_active', sa.Boolean(), nullable=True, comment='Is bot active'),
    sa.Column('telegram_joined_at', sa.DateTime(), nullable=True, comment='When joined bot'),
    sa.Column('telegram_last_activity', sa.DateTime(), nullable=True, comment='Last bot activity'),
    sa.Column('raw_data', sa.JSON(), nullable=True, comment='Original API response data'),
    sa.Column('last_sync_from_poster', sa.DateTime(), nullable=True, comment='Last sync from Poster'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_clients'))
    )
    with op.batch_alter_table('clients', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_clients_client_id'), ['client_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_clients_phone'), ['phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_clients_telegram_user_id'), ['telegram_user_id'], unique=False)

    op.create_table('http_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('is_request', sa.Boolean(), nullable=False),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('client_ip', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('request_headers', sa.JSON(), nullable=True),
    sa.Column('query_params', sa.JSON(), nullable=True),
    sa.Column('request_body', sa.JSON(), nullable=True),
    sa.Column('status_code', sa.Integer(), nullable=True),
    sa.Column('response_headers', sa.JSON(), nullable=True),
    sa.Column('response_body', sa.JSON(), nullable=True),
    sa.Column('processing_time_ms', sa.Float(), nullable=True),
    sa.Column('related_log_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.ForeignKeyConstraint(['related_log_id'], ['http_logs.id'], name=op.f('fk_http_logs_related_log_id_http_logs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_http_logs'))
    )
    op.create_table('otps',
    sa.Column('code', sa.String(length=6), nullable=False, comment='Код OTP (6 цифр)'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email користувача'),
    sa.Column('is_used', sa.Boolean(), nullable=True, comment='Чи був використаний OTP'),
    sa.Column('expires_at', sa.DateTime(), nullable=False, comment='Час закінчення терміну дії'),
    sa.Column('processed_at', sa.DateTime(), nullable=True, comment='Час обробки OTP'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_otps'))
    )
    with op.batch_alter_table('otps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_otps_email'), ['email'], unique=False)

    op.create_table('products',
    sa.Column('poster_product_id', sa.BigInteger(), nullable=False, comment='Product ID'),
    sa.Column('product_name', sa.String(length=255), nullable=False, comment='Product name'),
    sa.Column('product_code', sa.String(length=100), nullable=True, comment='Product code'),
    sa.Column('barcode', sa.String(length=100), nullable=True, comment='Product barcode'),
    sa.Column('category_name', sa.String(length=255), nullable=True, comment='Category name'),
    sa.Column('menu_category_id', sa.BigInteger(), nullable=True, comment='Menu category ID'),
    sa.Column('unit', sa.String(length=50), nullable=True, comment='Unit of measurement'),
    sa.Column('cost', sa.Numeric(precision=10, scale=2), nullable=True, comment='Product cost'),
    sa.Column('cost_netto', sa.Numeric(precision=10, scale=2), nullable=True, comment='Product cost netto'),
    sa.Column('weight_flag', sa.Boolean(), nullable=True, comment='Weight flag'),
    sa.Column('type', sa.Integer(), nullable=True, comment='Product type'),
    sa.Column('color', sa.String(length=50), nullable=True, comment='Product color'),
    sa.Column('photo', sa.Text(), nullable=True, comment='Photo path'),
    sa.Column('photo_origin', sa.Text(), nullable=True, comment='Original photo path'),
    sa.Column('sort_order', sa.Integer(), nullable=True, comment='Sort order'),
    sa.Column('tax_id', sa.Integer(), nullable=True, comment='Tax ID'),
    sa.Column('product_tax_id', sa.Integer(), nullable=True, comment='Product tax ID'),
    sa.Column('fiscal', sa.Boolean(), nullable=True, comment='Fiscal flag'),
    sa.Column('fiscal_code', sa.String(length=50), nullable=True, comment='Fiscal code'),
    sa.Column('workshop', sa.Integer(), nullable=True, comment='Workshop ID'),
    sa.Column('nodiscount', sa.Boolean(), nullable=True, comment='No discount flag'),
    sa.Column('ingredient_id', sa.BigInteger(), nullable=True, comment='Ingredient ID'),
    sa.Column('cooking_time', sa.Integer(), nullable=True, comment='Cooking time in seconds'),
    sa.Column('out', sa.Integer(), nullable=True, comment='Out of stock quantity'),
    sa.Column('spots', sa.JSON(), nullable=True, comment='Spots with prices and visibility'),
    sa.Column('sources', sa.JSON(), nullable=True, comment='Sources with prices'),
    sa.Column('modifications', sa.JSON(), nullable=True, comment='Product modifications'),
    sa.Column('group_modifications', sa.JSON(), nullable=True, comment='Group modifications'),
    sa.Column('ingredients', sa.JSON(), nullable=True, comment='Product ingredients'),
    sa.Column('different_spots_prices', sa.Boolean(), nullable=True, comment='Different spots prices flag'),
    sa.Column('product_production_description', sa.Text(), nullable=True, comment='Production description'),
    sa.Column('hidden', sa.Boolean(), nullable=True, comment='Hidden flag'),
    sa.Column('raw_data', sa.JSON(), nullable=True, comment='Original API response data'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_products'))
    )
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_products_barcode'), ['barcode'], unique=False)
        batch_op.create_index(batch_op.f('ix_products_poster_product_id'), ['poster_product_id'], unique=True)

    op.create_table('roles',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles'))
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('spots',
    sa.Column('spot_id', sa.BigInteger(), nullable=False, comment='Spot ID'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Spot name'),
    sa.Column('address', sa.String(length=500), nullable=True, comment='Spot address'),
    sa.Column('raw_data', sa.JSON(), nullable=True, comment='Original API response data'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_spots'))
    )
    with op.batch_alter_table('spots', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_spots_spot_id'), ['spot_id'], unique=True)

    op.create_table('sync_logs',
    sa.Column('sync_type', sa.String(length=50), nullable=False, comment='Type: transactions, clients, products'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: success, error, partial'),
    sa.Column('start_time', sa.DateTime(), nullable=False, comment='Sync start time'),
    sa.Column('end_time', sa.DateTime(), nullable=True, comment='Sync end time'),
    sa.Column('records_processed', sa.Integer(), nullable=False, comment='Records processed'),
    sa.Column('records_success', sa.Integer(), nullable=False, comment='Successful records'),
    sa.Column('records_failed', sa.Integer(), nullable=False, comment='Failed records'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if failed'),
    sa.Column('error_details', sa.JSON(), nullable=True, comment='Detailed error information'),
    sa.Column('api_endpoint', sa.String(length=255), nullable=True, comment='API endpoint called'),
    sa.Column('api_response_time', sa.Integer(), nullable=True, comment='API response time in ms'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_sync_logs'))
    )
    op.create_table('application_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.Column('level', sa.String(), nullable=False),
    sa.Column('log_type', sa.String(), nullable=False),
    sa.Column('detail_type', sa.String(), nullable=True),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('module', sa.String(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('entity_type', sa.String(), nullable=True),
    sa.Column('entity_id', sa.String(), nullable=True),
    sa.Column('exception_type', sa.String(), nullable=True),
    sa.Column('stack_trace', sa.Text(), nullable=True),
    sa.Column('http_log_id', sa.String(), nullable=True),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.ForeignKeyConstraint(['http_log_id'], ['http_logs.id'], name=op.f('fk_application_logs_http_log_id_http_logs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_application_logs'))
    )
    op.create_table('transactions',
    sa.Column('transaction_id', sa.BigInteger(), nullable=False, comment='Poster transaction ID'),
    sa.Column('spot_id', sa.Integer(), nullable=False, comment='Spot ID from Poster'),
    sa.Column('spot_name', sa.String(length=255), nullable=True, comment='Spot name'),
    sa.Column('client_id', sa.BigInteger(), nullable=True, comment='Poster client ID'),
    sa.Column('client_phone', sa.String(length=20), nullable=True, comment='Client phone number'),
    sa.Column('client_name', sa.String(length=255), nullable=True, comment='Client name'),
    sa.Column('client_email', sa.String(length=255), nullable=True, comment='Client email'),
    sa.Column('client', sa.BigInteger(), nullable=True, comment='Link to Poster client'),
    sa.Column('table_id', sa.Integer(), nullable=True, comment='Table ID'),
    sa.Column('table_name', sa.String(length=100), nullable=True, comment='Table name'),
    sa.Column('date_start', sa.DateTime(), nullable=True, comment='Transaction start time'),
    sa.Column('date_close', sa.DateTime(), nullable=True, comment='Transaction close time'),
    sa.Column('sum', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total transaction sum'),
    sa.Column('discount', sa.Numeric(precision=10, scale=2), nullable=False, comment='Discount amount'),
    sa.Column('bonus', sa.Numeric(precision=10, scale=2), nullable=False, comment='Bonus amount'),
    sa.Column('status', sa.Integer(), nullable=False, comment='Transaction status'),
    sa.Column('user_id', sa.Integer(), nullable=True, comment='Poster user ID who created transaction'),
    sa.Column('raw_data', sa.JSON(), nullable=True, comment='Raw API response data'),
    sa.Column('is_synced_to_telegram', sa.Boolean(), nullable=False, comment='Synced to Telegram bot'),
    sa.Column('sync_error', sa.Text(), nullable=True, comment='Last sync error'),
    sa.Column('last_sync_attempt', sa.DateTime(), nullable=True, comment='Last sync attempt time'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.ForeignKeyConstraint(['client'], ['clients.client_id'], name=op.f('fk_transactions_client_clients')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transactions'))
    )
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_transactions_client_phone'), ['client_phone'], unique=False)
        batch_op.create_index(batch_op.f('ix_transactions_date_close'), ['date_close'], unique=False)
        batch_op.create_index(batch_op.f('ix_transactions_transaction_id'), ['transaction_id'], unique=True)

    op.create_table('users',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_users_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    op.create_table('tokens',
    sa.Column('token', sa.String(length=128), nullable=False, comment='API токен для автентифікації'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Назва токену для ідентифікації користувачем'),
    sa.Column('description', sa.Text(), nullable=True, comment='Опис токену'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='ID користувача, якому належить токен'),
    sa.Column('scopes', sa.String(length=255), nullable=True, comment='Права доступу токену (розділені комами)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи активний токен'),
    sa.Column('last_used_at', sa.DateTime(), nullable=True, comment='Дата та час останнього використання токену'),
    sa.Column('expires_at', sa.DateTime(), nullable=True, comment='Дата та час закінчення терміну дії токену'),
    sa.Column('created_from_ip', sa.String(length=45), nullable=True, comment='IP-адреса, з якої був створений токен'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tokens_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tokens'))
    )
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tokens_token'), ['token'], unique=True)

    op.create_table('transaction_products',
    sa.Column('transaction_id', sa.BigInteger(), nullable=False, comment='Poster transaction ID'),
    sa.Column('position', sa.Integer(), nullable=False, comment='Product position in transaction'),
    sa.Column('poster_product_id', sa.Integer(), nullable=True, comment='Poster product ID'),
    sa.Column('product_name', sa.String(length=255), nullable=False, comment='Product name'),
    sa.Column('count', sa.Numeric(precision=8, scale=3), nullable=False, comment='Product quantity'),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False, comment='Product price per unit'),
    sa.Column('sum', sa.Numeric(precision=10, scale=2), nullable=False, comment='Total sum for this product'),
    sa.Column('tax_id', sa.Integer(), nullable=True, comment='Tax ID'),
    sa.Column('tax_value', sa.Numeric(precision=10, scale=2), nullable=True, comment='Tax amount'),
    sa.Column('tax_type', sa.String(length=20), nullable=True, comment='Tax type'),
    sa.Column('poster_product', sa.BigInteger(), nullable=True, comment='Link to Poster product catalog'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Унікальний ідентифікатор запису'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Дата та час створення запису'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата та час останнього оновлення запису'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Чи є запис активним'),
    sa.ForeignKeyConstraint(['poster_product'], ['products.poster_product_id'], name=op.f('fk_transaction_products_poster_product_products')),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.transaction_id'], name=op.f('fk_transaction_products_transaction_id_transactions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_transaction_products'))
    )
    with op.batch_alter_table('transaction_products', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_transaction_products_transaction_id'), ['transaction_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transaction_products', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_transaction_products_transaction_id'))

    op.drop_table('transaction_products')
    with op.batch_alter_table('tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tokens_token'))

    op.drop_table('tokens')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_transactions_transaction_id'))
        batch_op.drop_index(batch_op.f('ix_transactions_date_close'))
        batch_op.drop_index(batch_op.f('ix_transactions_client_phone'))

    op.drop_table('transactions')
    op.drop_table('application_logs')
    op.drop_table('sync_logs')
    with op.batch_alter_table('spots', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_spots_spot_id'))

    op.drop_table('spots')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    with op.batch_alter_table('products', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_products_poster_product_id'))
        batch_op.drop_index(batch_op.f('ix_products_barcode'))

    op.drop_table('products')
    with op.batch_alter_table('otps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_otps_email'))

    op.drop_table('otps')
    op.drop_table('http_logs')
    with op.batch_alter_table('clients', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_clients_telegram_user_id'))
        batch_op.drop_index(batch_op.f('ix_clients_phone'))
        batch_op.drop_index(batch_op.f('ix_clients_client_id'))

    op.drop_table('clients')
    # ### end Alembic commands ###
