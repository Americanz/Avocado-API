##!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
from datetime import datetime

def test_bonus_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –±–æ–Ω—É—Å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            database="avocado_db",
            user="avocado_user",
            password="avocado_pass"
        )        conn = psycopg2.connect(
            host="localhost",
            port=5432,
            database="avocado_db",
            user="avocado_user",
            password="avocado_pass"
        )
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—ñ—Å–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
"""

import psycopg2
from psycopg2.extras import RealDictCursor
import os
from datetime import datetime


def test_bonus_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –±–æ–Ω—É—Å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏"""

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        conn = psycopg2.connect(
            host="localhost",
            port=15432,
            database="avocado_db",
            user="avocado_user",
            password="avocado_pass",
        )
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–µ")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏: {e}")
        return False

    tests_passed = 0
    total_tests = 0

    # –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
    total_tests += 1
    try:
        cursor.execute(
            """
            SELECT table_name FROM information_schema.tables
            WHERE table_name IN ('system_settings', 'transaction_bonus')
        """
        )
        tables = [row["table_name"] for row in cursor.fetchall()]

        if "system_settings" in tables and "transaction_bonus" in tables:
            print("‚úÖ –¢–µ—Å—Ç 1: –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
            tests_passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç 1: –í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ. –ó–Ω–∞–π–¥–µ–Ω–æ: {tables}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 1: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å: {e}")

    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    total_tests += 1
    try:
        cursor.execute("SELECT key, value FROM system_settings WHERE key LIKE 'bonus%'")
        settings = {row["key"]: row["value"] for row in cursor.fetchall()}

        required_settings = ["bonus_system_enabled", "bonus_system_start_date"]
        missing = [s for s in required_settings if s not in settings]

        if not missing:
            print("‚úÖ –¢–µ—Å—Ç 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
            tests_passed += 1
            for key, value in settings.items():
                print(f"   üìã {key}: {value}")
        else:
            print(f"‚ùå –¢–µ—Å—Ç 2: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {missing}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")

    # –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≥–µ—Ä—ñ–≤
    total_tests += 1
    try:
        cursor.execute(
            """
            SELECT trigger_name, event_object_table, action_timing, event_manipulation
            FROM information_schema.triggers
            WHERE trigger_name = 'trigger_process_bonus_operations'
        """
        )
        triggers = cursor.fetchall()

        if triggers:
            print("‚úÖ –¢–µ—Å—Ç 3: –¢—Ä–∏–≥–µ—Ä –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∞–∫—Ç–∏–≤–Ω–∏–π")
            tests_passed += 1
            for trigger in triggers:
                print(
                    f"   ‚ö° {trigger['trigger_name']} –Ω–∞ {trigger['event_object_table']} ({trigger['action_timing']} {trigger['event_manipulation']})"
                )
        else:
            print("‚ùå –¢–µ—Å—Ç 3: –¢—Ä–∏–≥–µ—Ä –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 3: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç—Ä–∏–≥–µ—Ä—ñ–≤: {e}")

    # –¢–µ—Å—Ç 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π
    total_tests += 1
    try:
        cursor.execute(
            """
            SELECT routine_name FROM information_schema.routines
            WHERE routine_name IN ('process_bonus_operations', 'manage_bonus_triggers', 'process_bonus_operations_manual')
            AND routine_type = 'FUNCTION'
        """
        )
        functions = [row["routine_name"] for row in cursor.fetchall()]

        required_functions = [
            "process_bonus_operations",
            "manage_bonus_triggers",
            "process_bonus_operations_manual",
        ]
        missing_functions = [f for f in required_functions if f not in functions]

        if not missing_functions:
            print("‚úÖ –¢–µ—Å—Ç 4: –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω—ñ")
            tests_passed += 1
            for func in functions:
                print(f"   üîß {func}()")
        else:
            print(f"‚ùå –¢–µ—Å—Ç 4: –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: {missing_functions}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 4: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π: {e}")

    # –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
    total_tests += 1
    try:
        cursor.execute(
            """
            SELECT
                COUNT(*) as total_operations,
                COUNT(DISTINCT client_id) as unique_clients,
                SUM(CASE WHEN amount > 0 THEN amount ELSE 0 END) / 100.0 as total_earned,
                SUM(CASE WHEN amount < 0 THEN ABS(amount) ELSE 0 END) / 100.0 as total_spent
            FROM transaction_bonus
        """
        )
        stats = cursor.fetchone()

        if stats["total_operations"] > 0:
            print("‚úÖ –¢–µ—Å—Ç 5: –Ñ –±–æ–Ω—É—Å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—ñ")
            tests_passed += 1
            print(f"   üìä –û–ø–µ—Ä–∞—Ü—ñ–π: {stats['total_operations']}")
            print(f"   üë• –ö–ª—ñ—î–Ω—Ç—ñ–≤: {stats['unique_clients']}")
            print(f"   üíö –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {stats['total_earned']:.2f} –≥—Ä–Ω")
            print(f"   üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {stats['total_spent']:.2f} –≥—Ä–Ω")
        else:
            print(
                "‚ö†Ô∏è  –¢–µ—Å—Ç 5: –ë–æ–Ω—É—Å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏)"
            )
            tests_passed += 1  # –¶–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 5: –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π: {e}")

    # –¢–µ—Å—Ç 6: –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞–º–∏
    total_tests += 1
    try:
        cursor.execute("SELECT manage_bonus_triggers(true)")
        result = cursor.fetchone()

        if result and "ENABLED" in str(result[0]):
            print("‚úÖ –¢–µ—Å—Ç 6: –§—É–Ω–∫—Ü—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä–∞–º–∏ –ø—Ä–∞—Ü—é—î")
            tests_passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç 6: –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü—ñ—ó: {result}")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 6: –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è: {e}")

    # –§—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ë–û–ù–£–°–ù–û–á –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/{total_tests} —Ç–µ—Å—Ç—ñ–≤")

    if tests_passed == total_tests:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ! –ë–æ–Ω—É—Å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏.")
    elif tests_passed >= total_tests * 0.8:
        print("‚ö†Ô∏è  –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–∞, –∞–ª–µ —î –¥–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏.")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏! –ü–æ—Ç—Ä—ñ–±–Ω–µ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")

    print("=" * 60)

    cursor.close()
    conn.close()

    return tests_passed == total_tests


if __name__ == "__main__":
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ë–û–ù–£–°–ù–û–á –°–ò–°–¢–ï–ú–ò")
    print("=" * 60)
    print(f"üìÖ –ß–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    success = test_bonus_system()

    if success:
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ú–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:")
        print("   ‚Ä¢ python script/check_client_bonus.py <client_id>")
        print("   ‚Ä¢ python script/sync/sync_poster_receipts.py today")
    else:
        print("\nüîß –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏")
