#!/usr/bin/env python3
"""
–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è PostgreSQL —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è LUCHAN
"""

import asyncio
import asyncpg
from pathlib import Path
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()


class FunctionDeployer:
    def __init__(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ .env
        self.db_host = os.getenv("POSTGRES_HOST", "localhost")
        self.db_port = int(os.getenv("POSTGRES_PORT", "5432"))
        self.db_name = os.getenv("POSTGRES_DB", "avocado_db")
        self.db_user = os.getenv("POSTGRES_USER", "avocado_user")
        self.db_password = os.getenv("POSTGRES_PASSWORD", "avocado_pass")

        self.functions_dir = Path(__file__).parent

        print(f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ: {self.db_host}:{self.db_port}/{self.db_name}")

    async def connect_db(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            self.conn = await asyncpg.connect(
                host=self.db_host,
                port=self.db_port,
                database=self.db_name,
                user=self.db_user,
                password=self.db_password,
            )
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
            return False

    async def close_db(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        if hasattr(self, "conn") and self.conn:
            await self.conn.close()
            print("üìù –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")

    async def deploy_functions_from_file(self, filename):
        """–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∑ —Ñ–∞–π–ª—É"""
        file_path = self.functions_dir / filename

        if not file_path.exists():
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                sql_content = f.read()

            # –í–∏–∫–æ–Ω—É—î–º–æ –≤–µ—Å—å —Ñ–∞–π–ª —è–∫ –æ–¥–∏–Ω –±–ª–æ–∫ (PostgreSQL –ø—ñ–¥—Ç—Ä–∏–º—É—î —Ü–µ)
            print(f"üìÑ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∑ {filename}...")

            try:
                await self.conn.execute(sql_content)
                print(f"   ‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ {filename} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {e}")
                print(f"   üîÑ –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ñ—É–Ω–∫—Ü—ñ—ó...")

                # –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –ø–æ —Ñ—É–Ω–∫—Ü—ñ—è—Ö
                functions = []
                current_function = []

                for line in sql_content.split("\n"):
                    if (
                        line.strip().startswith("CREATE OR REPLACE FUNCTION")
                        and current_function
                    ):
                        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é
                        functions.append("\n".join(current_function))
                        current_function = [line]
                    else:
                        current_function.append(line)

                # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ñ—É–Ω–∫—Ü—ñ—é
                if current_function:
                    functions.append("\n".join(current_function))

                # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –æ–∫—Ä–µ–º–æ
                for i, func in enumerate(functions, 1):
                    if func.strip():
                        try:
                            await self.conn.execute(func)
                            print(f"   ‚úÖ –§—É–Ω–∫—Ü—ñ—è {i}/{len(functions)} –≤–∏–∫–æ–Ω–∞–Ω–∞")
                        except Exception as func_error:
                            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ—É–Ω–∫—Ü—ñ—ó {i}: {func_error}")

            print(f"‚úÖ –û–±—Ä–æ–±–∫–∞ {filename} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—ñ {filename}: {e}")
            return False

    async def test_functions(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô:")
        print("=" * 50)

        test_queries = [
            {
                "name": "get_spot_revenue",
                "query": "SELECT get_spot_revenue(1, '2025-08-01', '2025-08-31')",
                "description": "–û–±–æ—Ä–æ—Ç —Ç–æ—á–∫–∏ –∑–∞ —Å–µ—Ä–ø–µ–Ω—å",
            },
            {
                "name": "get_top_products",
                "query": "SELECT * FROM get_top_products(5)",
                "description": "–¢–û–ü-5 –ø—Ä–æ–¥—É–∫—Ç—ñ–≤",
            },
            {
                "name": "get_client_stats",
                "query": "SELECT * FROM get_client_stats() LIMIT 3",
                "description": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
            },
            {
                "name": "calculate_revenue_growth",
                "query": "SELECT calculate_revenue_growth('2025-07-01', '2025-08-31')",
                "description": "–†—ñ—Å—Ç –æ–±–æ—Ä–æ—Ç—É",
            },
        ]

        for test in test_queries:
            try:
                print(f"\nüîç –¢–µ—Å—Ç: {test['description']}")
                result = await self.conn.fetch(test["query"])
                print(f"   ‚úÖ {test['name']}: OK ({len(result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤)")

                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É
                if result:
                    print(f"   üìä –ü—Ä–∏–∫–ª–∞–¥: {dict(result[0])}")

            except Exception as e:
                print(f"   ‚ùå {test['name']}: {e}")

    async def list_deployed_functions(self):
        """–°–ø–∏—Å–æ–∫ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        print("\nüìã –†–û–ó–ì–û–†–ù–£–¢–Ü –§–£–ù–ö–¶–Ü–á:")
        print("=" * 50)

        query = """
        SELECT
            routine_name as function_name,
            routine_type as type,
            data_type as return_type
        FROM information_schema.routines
        WHERE routine_schema = 'public'
        AND (routine_name LIKE '%luchan%'
             OR routine_name LIKE 'get_%'
             OR routine_name LIKE 'calculate_%'
             OR routine_name LIKE '%spot%'
             OR routine_name LIKE '%client%'
             OR routine_name LIKE '%product%')
        ORDER BY routine_name;
        """

        try:
            functions = await self.conn.fetch(query)

            if functions:
                for func in functions:
                    print(
                        f"   üîß {func['function_name']} ({func['type']}) -> {func['return_type']}"
                    )
            else:
                print("   ‚ö†Ô∏è  –§—É–Ω–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ñ—É–Ω–∫—Ü—ñ–π: {e}")

    async def deploy_all(self):
        """–†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
        print("üöÄ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø POSTGRESQL –§–£–ù–ö–¶–Ü–ô –î–õ–Ø LUCHAN")
        print("=" * 60)

        if not await self.connect_db():
            return False

        try:
            # –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –±—ñ–∑–Ω–µ—Å-–∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            await self.deploy_functions_from_file("business_analytics_functions.sql")

            # –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            await self.deploy_functions_from_file("operational_functions.sql")

            # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü—ñ–π
            await self.list_deployed_functions()

            # –¢–µ—Å—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó
            await self.test_functions()

            print("\n" + "=" * 60)
            print("‚úÖ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
            print("=" * 60)

            return True

        except Exception as e:
            print(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: {e}")
            return False

        finally:
            await self.close_db()


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    deployer = FunctionDeployer()
    success = await deployer.deploy_all()

    if success:
        print("\nüí° –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ SQL –∑–∞–ø–∏—Ç–∞—Ö:")
        print("   SELECT get_spot_revenue(1, '2025-08-01', '2025-08-31');")
        print("   SELECT * FROM get_top_products(10);")
        print("   SELECT * FROM get_client_stats();")
    else:
        print("\n‚ùå –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.")


if __name__ == "__main__":
    asyncio.run(main())
