#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è PostgreSQL —Ñ—É–Ω–∫—Ü—ñ–π LUCHAN
"""

import asyncio
import asyncpg
import os
from dotenv import load_dotenv

load_dotenv()


async def test_luchan_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π"""
    conn = await asyncpg.connect(
        host=os.getenv("POSTGRES_HOST", "localhost"),
        port=int(os.getenv("POSTGRES_PORT", "5432")),
        database=os.getenv("POSTGRES_DB", "avocado_db"),
        user=os.getenv("POSTGRES_USER", "avocado_user"),
        password=os.getenv("POSTGRES_PASSWORD", "avocado_pass"),
    )

    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø POSTGRESQL –§–£–ù–ö–¶–Ü–ô LUCHAN")
    print("=" * 60)

    # 1. –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    print("\nüìã –°–¢–í–û–†–ï–ù–Ü –§–£–ù–ö–¶–Ü–á:")
    query = """
    SELECT
        routine_name,
        routine_type,
        data_type
    FROM information_schema.routines
    WHERE routine_schema = 'public'
    AND routine_name ~ '^(get_|find_|calculate_)'
    ORDER BY routine_name;
    """

    functions = await conn.fetch(query)
    for func in functions:
        print(
            f"   üîß {func['routine_name']} ({func['routine_type']}) -> {func['data_type']}"
        )

    # 2. –¢–µ—Å—Ç get_spot_revenue (–ø—Ä–∞—Ü—é—î)
    print("\n‚úÖ –¢–ï–°–¢: –î–æ—Ö—ñ–¥ —Ç–æ—á–∫–∏ –∑–∞ —Å–µ—Ä–ø–µ–Ω—å")
    try:
        result = await conn.fetchrow(
            "SELECT * FROM get_spot_revenue($1, $2::DATE, $3::DATE)",
            1,
            "2025-08-01",
            "2025-08-31",
        )
        if result:
            spot_name, transactions, revenue, avg_check, max_check = result
            print(f"   üìä {spot_name}: {transactions:,} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")
            print(f"   üí∞ –î–æ—Ö—ñ–¥: {revenue:,.2f} –≥—Ä–Ω")
            print(f"   üìà –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {avg_check:.2f} –≥—Ä–Ω")
            print(f"   üîù –ú–∞–∫—Å —á–µ–∫: {max_check:.2f} –≥—Ä–Ω")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # 3. –¢–µ—Å—Ç get_top_products
    print("\nüì¶ –¢–ï–°–¢: –¢–û–ü –ø—Ä–æ–¥—É–∫—Ç–∏")
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤–∏–∫–ª–∏–∫—É
        result = await conn.fetch("SELECT * FROM get_top_products(5)")
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(result)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
        for i, row in enumerate(result[:3], 1):
            print(f"   {i}. {dict(row)}")
    except Exception as e:
        print(f"   ‚ùå get_top_products(5): {e}")

        # –°–ø—Ä–æ–±—É—î–º–æ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        try:
            result = await conn.fetch("SELECT * FROM get_top_products()")
            print(f"   ‚úÖ get_top_products(): {len(result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        except Exception as e2:
            print(f"   ‚ùå get_top_products(): {e2}")

    # 4. –¢–µ—Å—Ç —Å–µ–∑–æ–Ω–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    print("\nüìÖ –¢–ï–°–¢: –°–µ–∑–æ–Ω–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞")
    try:
        result = await conn.fetch("SELECT * FROM get_seasonal_analytics()")
        print(f"   ‚úÖ –°–µ–∑–æ–Ω–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞: {len(result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        for i, row in enumerate(result[:2], 1):
            print(f"   {i}. {dict(row)}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    # 5. –¢–µ—Å—Ç –ø–æ–≥–æ–¥–∏–Ω–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    print("\n‚è∞ –¢–ï–°–¢: –ü–æ–≥–æ–¥–∏–Ω–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–æ—á–∫–∏")
    try:
        result = await conn.fetch("SELECT * FROM get_spot_hourly_performance(1)")
        print(f"   ‚úÖ –ü–æ–≥–æ–¥–∏–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(result)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        for i, row in enumerate(result[:3], 1):
            print(f"   {i}. {dict(row)}")
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)

    await conn.close()


if __name__ == "__main__":
    asyncio.run(test_luchan_functions())
