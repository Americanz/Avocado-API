#!/usr/bin/env python3
"""
–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è spots –∑ Poster API
"""

import asyncio
import os
import sys
import logging
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger("restore_spots")


async def restore_spots():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è spots –∑ Poster API"""
    logger.info("üè™ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è spots...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
    api_token = os.getenv("POSTER_API_TOKEN")
    account_name = os.getenv("POSTER_ACCOUNT_NAME")

    if not api_token or not account_name:
        logger.error(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ POSTER_API_TOKEN –∞–±–æ POSTER_ACCOUNT_NAME –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
        )
        return

    try:
        from src.features.telegram_bot.poster.services.api_service import (
            PosterAPIService,
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ API —Å–µ—Ä–≤—ñ—Å
        api_service = PosterAPIService(api_token=api_token, account_name=account_name)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ spots –∑ API
        logger.info("üì° –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ spots –∑ Poster API...")
        spots = await api_service.get_spots()

        if not spots:
            logger.warning("‚ö†Ô∏è –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ spots –∑ API")
            return

        logger.info(f"üè™ –û—Ç—Ä–∏–º–∞–Ω–æ {len(spots)} spots –∑ API")

        # –¢–µ–ø–µ—Ä –≤—Å—Ç–∞–≤–ª—è—î–º–æ —ó—Ö –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ SQLAlchemy
        from src.core.database.connection import AsyncSessionLocal
        from src.features.telegram_bot.models.spot import Spot

        async with AsyncSessionLocal() as session:
            spots_created = 0
            spots_updated = 0

            for spot_data in spots:
                try:
                    spot_id = spot_data.get("spot_id")
                    if not spot_id:
                        logger.warning(f"Spot –±–µ–∑ ID: {spot_data}")
                        continue

                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î spot
                    from sqlalchemy import select

                    existing_spot = await session.execute(
                        select(Spot).where(Spot.spot_id == spot_id)
                    )
                    existing_spot = existing_spot.scalar_one_or_none()

                    if existing_spot:
                        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π spot
                        existing_spot.name = spot_data.get("name")
                        existing_spot.address = spot_data.get("address")
                        existing_spot.raw_data = spot_data
                        spots_updated += 1
                        logger.debug(f"–û–Ω–æ–≤–ª–µ–Ω–æ spot {spot_id}")
                    else:
                        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π spot
                        new_spot = Spot(
                            spot_id=spot_id,
                            name=spot_data.get("name"),
                            address=spot_data.get("address"),
                            raw_data=spot_data,
                        )
                        session.add(new_spot)
                        spots_created += 1
                        logger.debug(f"–°—Ç–≤–æ—Ä–µ–Ω–æ spot {spot_id}")

                except Exception as e:
                    logger.error(
                        f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ spot {spot_data.get('spot_id', 'unknown')}: {e}"
                    )
                    continue

            # –ó–±–µ—Ä–µ–∂—É—î–º–æ –∑–º—ñ–Ω–∏
            await session.commit()

            logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è spots –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            logger.info(f"   üè™ –°—Ç–≤–æ—Ä–µ–Ω–æ: {spots_created}")
            logger.info(f"   üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {spots_updated}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            from sqlalchemy import text

            result = await session.execute(text("SELECT COUNT(*) FROM spots"))
            count = result.scalar()
            logger.info(f"üéØ –í—Å—å–æ–≥–æ spots –≤ –ë–î: {count}")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ spots: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(restore_spots())
