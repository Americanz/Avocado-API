#!/usr/bin/env python3
"""
–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è poster_products
"""

import asyncio
import os
import sys
import logging

from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–æ–¥–∞—î–º–æ –∫–æ—Ä–µ–Ω–µ–≤—É –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç—É –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger("restore_products")


async def restore_products():
    """–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ Poster API"""
    logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤...")

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API
    api_token = os.getenv("POSTER_API_TOKEN")
    account_name = os.getenv("POSTER_ACCOUNT_NAME")

    if not api_token or not account_name:
        logger.error(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ POSTER_API_TOKEN –∞–±–æ POSTER_ACCOUNT_NAME –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
        )
        return

    try:
        from src.features.telegram_bot.poster.services.api_service import (
            PosterAPIService,
        )
        from src.features.telegram_bot.poster.services.product_service import (
            ProductService,
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ API —Å–µ—Ä–≤—ñ—Å
        api_service = PosterAPIService(api_token=api_token, account_name=account_name)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ API
        logger.info("üì° –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ Poster API...")
        products = await api_service.get_products()

        if not products:
            logger.warning("‚ö†Ô∏è –ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ API")
            return

        logger.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑ API")

        # –°—Ç–≤–æ—Ä—é—î–º–æ product service
        product_service = ProductService(api_token=api_token, account_name=account_name)

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        stats = product_service.sync_products_to_db(products)

        logger.info("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"   üìä –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats.get('processed', 0)}")
        logger.info(f"   ‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ: {stats.get('created', 0)}")
        logger.info(f"   üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('updated', 0)}")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ AsyncSession
        from src.core.database.connection import AsyncSessionLocal
        from sqlalchemy import text

        async with AsyncSessionLocal() as session:
            result = await session.execute(text("SELECT COUNT(*) FROM products"))
            count = result.scalar()
            logger.info(f"üéØ –í—Å—å–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤ –ë–î: {count}")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: {e}")
        import traceback

        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(restore_products())
