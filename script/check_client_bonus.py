#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ–Ω—É—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞
–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å, —ñ—Å—Ç–æ—Ä—ñ—é –æ–ø–µ—Ä–∞—Ü—ñ–π —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
"""

import sys
from pathlib import Path
from datetime import datetime

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import create_engine, text
from src.config.settings import settings


def format_datetime(dt):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É"""
    if dt:
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    return "N/A"


def format_amount(amount):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—É–º–∏"""
    if amount is not None:
        return f"{amount:.2f}"
    return "0.00"


def format_client_balance(balance_kopecks):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–ª—ñ—î–Ω—Ç–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ)"""
    if balance_kopecks is not None:
        return f"{(balance_kopecks / 100):.2f}"
    return "0.00"


def get_client_bonus_info(client_id):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –±–æ–Ω—É—Å–∞—Ö –∫–ª—ñ—î–Ω—Ç–∞"""

    engine = create_engine(settings.DATABASE_URL)

    with engine.connect() as conn:
        # 1. –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞
        client_info = conn.execute(
            text(
                """
            SELECT
                client_id,
                COALESCE(firstname || ' ' || lastname, phone) as name,
                phone,
                bonus,
                created_at,
                updated_at
            FROM clients
            WHERE client_id = :client_id
        """
            ),
            {"client_id": client_id},
        ).fetchone()

        if not client_info:
            print(f"‚ùå –ö–ª—ñ—î–Ω—Ç –∑ ID {client_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return

        print("=" * 80)
        print(f"üßë‚Äçüíº –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–õ–Ü–Ñ–ù–¢–ê #{client_id}")
        print("=" * 80)
        print(f"üìõ –Ü–º'—è: {client_info[1] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}")
        print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client_info[2] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}")
        print(f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å—ñ–≤: {format_client_balance(client_info[3])}")
        print(f"üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {format_datetime(client_info[4])}")
        print(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ: {format_datetime(client_info[5])}")

        # 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        bonus_stats = conn.execute(
            text(
                """
            SELECT
                operation_type,
                COUNT(*) as count,
                SUM(amount) as total_amount,
                MAX(processed_at) as last_operation
            FROM transaction_bonus
            WHERE client_id = :client_id
            GROUP BY operation_type
            ORDER BY operation_type
        """
            ),
            {"client_id": client_id},
        ).fetchall()

        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ù–£–°–ù–ò–• –û–ü–ï–†–ê–¶–Ü–ô")
        print("-" * 80)
        if bonus_stats:
            total_earned = 0
            total_spent = 0

            for stat in bonus_stats:
                op_type = stat[0]
                count = stat[1]
                amount = stat[2] or 0
                amount_grn = float(amount) / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ
                last_op = format_datetime(stat[3])

                if op_type == "EARN":
                    total_earned += amount_grn
                    print(
                        f"üíö –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: {count} –æ–ø–µ—Ä–∞—Ü—ñ–π, +{format_amount(amount_grn)} (–æ—Å—Ç–∞–Ω–Ω—î: {last_op})"
                    )
                elif op_type == "SPEND":
                    total_spent += abs(amount_grn)  # amount –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π –¥–ª—è SPEND
                    print(
                        f"üí∏ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {count} –æ–ø–µ—Ä–∞—Ü—ñ–π, {format_amount(amount_grn)} (–æ—Å—Ç–∞–Ω–Ω—î: {last_op})"
                    )
                else:
                    print(
                        f"üîÑ {op_type}: {count} –æ–ø–µ—Ä–∞—Ü—ñ–π, {format_amount(amount_grn)} (–æ—Å—Ç–∞–Ω–Ω—î: {last_op})"
                    )

            print(f"\nüìà –í—Å—å–æ–≥–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: +{format_amount(total_earned)}")
            print(f"üìâ –í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ: -{format_amount(total_spent)}")
            print(
                f"üßÆ –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {format_amount(total_earned - total_spent)}"
            )
        else:
            print("‚ùå –ù–µ–º–∞—î –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π")

        # 3. –Ü—Å—Ç–æ—Ä—ñ—è –±–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π (–æ—Å—Ç–∞–Ω–Ω—ñ 10)
        bonus_history = conn.execute(
            text(
                """
            SELECT
                id,
                transaction_id,
                operation_type,
                amount,
                balance_before,
                balance_after,
                description,
                processed_at
            FROM transaction_bonus
            WHERE client_id = :client_id
            ORDER BY processed_at DESC
            LIMIT 10
        """
            ),
            {"client_id": client_id},
        ).fetchall()

        print(f"\nüìã –û–°–¢–ê–ù–ù–Ü –ë–û–ù–£–°–ù–Ü –û–ü–ï–†–ê–¶–Ü–á (—Ç–æ–ø 10)")
        print("-" * 80)
        if bonus_history:
            for op in bonus_history:
                op_id = op[0]
                tx_id = op[1] or "N/A"
                op_type = op[2]
                amount = format_client_balance(
                    op[3]
                )  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ amount –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ
                balance_before = format_client_balance(
                    op[4]
                )  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ
                balance_after = format_client_balance(
                    op[5]
                )  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑ –∫–æ–ø—ñ–π–æ–∫ –≤ –≥—Ä–∏–≤–Ω—ñ
                description = op[6] or "–ë–µ–∑ –æ–ø–∏—Å—É"
                processed_at = format_datetime(op[7])

                # –°–∏–º–≤–æ–ª–∏ –¥–ª—è —Ç–∏–ø—ñ–≤ –æ–ø–µ—Ä–∞—Ü—ñ–π
                symbol = {
                    "EARN": "üíö +",
                    "SPEND": "üí∏ ",
                    "ADJUST": "üîÑ ",
                    "EXPIRE": "‚è∞ ",
                }.get(op_type, "‚ùì ")

                print(f"{symbol}{amount} | {balance_before} ‚Üí {balance_after}")
                print(f"   üìÖ {processed_at} | TX: {tx_id}")
                print(f"   üìù {description}")
                print()
        else:
            print("‚ùå –ù–µ–º–∞—î –æ–ø–µ—Ä–∞—Ü—ñ–π")

        # 4. –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞ –∑ –±–æ–Ω—É—Å–∞–º–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 10) + —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Spot —Ç–∞ —Ç–æ–≤–∞—Ä–∏
        transactions = conn.execute(
            text(
                """
            SELECT
                t.transaction_id,
                t.sum,
                t.bonus,
                t.payed_bonus,
                t.date_close,
                COUNT(tb.id) as bonus_operations,
                s.name as spot_name,
                s.address as spot_address,
                STRING_AGG(
                    DISTINCT p.product_name || ' (' || tp.count || ' —à—Ç. √ó ' || tp.price || ' –≥—Ä–Ω)',
                    '|SPLIT|'
                    ORDER BY p.product_name || ' (' || tp.count || ' —à—Ç. √ó ' || tp.price || ' –≥—Ä–Ω)'
                ) as products_list
            FROM transactions t
            LEFT JOIN transaction_bonus tb ON t.transaction_id = tb.transaction_id
            LEFT JOIN spots s ON t.spot = s.spot_id
            LEFT JOIN transaction_products tp ON t.transaction_id = tp.transaction_id
            LEFT JOIN products p ON tp.product = p.poster_product_id
            WHERE t.client_id = :client_id
            AND t.date_close IS NOT NULL
            GROUP BY t.transaction_id, t.sum, t.bonus, t.payed_bonus, t.date_close, s.name, s.address
            ORDER BY t.date_close DESC
            LIMIT 10
        """
            ),
            {"client_id": client_id},
        ).fetchall()

        print(f"üõí –û–°–¢–ê–ù–ù–Ü –¢–†–ê–ù–ó–ê–ö–¶–Ü–á –ó –ë–û–ù–£–°–ê–ú–ò (—Ç–æ–ø 10)")
        print("-" * 80)
        if transactions:
            for tx in transactions:
                tx_id = tx[0]
                tx_sum = format_amount(tx[1])
                bonus_percent = format_amount(tx[2]) if tx[2] else "0.00"
                paid_bonus = format_amount(tx[3]) if tx[3] else "0.00"
                date_close = format_datetime(tx[4])
                bonus_ops = tx[5]
                spot_name = tx[6] or "–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–∫–ª–∞–¥"
                spot_address = tx[7] or "–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
                products_list = tx[8] or "–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"

                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –±–æ–Ω—É—Å—ñ–≤
                if tx[1] and tx[2]:
                    earned_bonus = format_amount(tx[1] * tx[2] / 100)
                else:
                    earned_bonus = "0.00"

                print(f"üßæ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è #{tx_id}")
                print(f"   üè™ –ó–∞–∫–ª–∞–¥: {spot_name}")
                print(f"   üìç –ê–¥—Ä–µ—Å–∞: {spot_address}")
                print(
                    f"   üí∞ –°—É–º–∞: {tx_sum} | –ë–æ–Ω—É—Å %: {bonus_percent}% | –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ: +{earned_bonus}"
                )
                print(f"   üí∏ –û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: -{paid_bonus}")
                print(f"   üìÖ –î–∞—Ç–∞: {date_close}")
                print(f"   üîÑ –ë–æ–Ω—É—Å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π: {bonus_ops}")

                # –ö—Ä–∞—Å–∏–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤
                if products_list and products_list != "–¢–æ–≤–∞—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ":
                    print(f"   üõçÔ∏è –¢–æ–≤–∞—Ä–∏:")
                    products = products_list.split("|SPLIT|")
                    for i, product in enumerate(products, 1):
                        print(f"      {i}. {product}")
                else:
                    print(f"   üõçÔ∏è –¢–æ–≤–∞—Ä–∏: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                print()
        else:
            print("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π")

        # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
        print(f"üîç –ü–ï–†–ï–í–Ü–†–ö–ê –¶–Ü–õ–Ü–°–ù–û–°–¢–Ü –î–ê–ù–ò–•")
        print("-" * 80)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
        calculated_balance = conn.execute(
            text(
                """
            SELECT COALESCE(SUM(amount), 0) as calculated_balance
            FROM transaction_bonus
            WHERE client_id = :client_id
        """
            ),
            {"client_id": client_id},
        ).scalar()

        current_balance = client_info[3] or 0

        print(f"üí∞ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å –≤ clients: {format_client_balance(current_balance)}")
        print(f"üßÆ –†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å –∑ –æ–ø–µ—Ä–∞—Ü—ñ–π: {format_client_balance(calculated_balance)}")

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –æ–±–∏–¥–≤–∞ –±–∞–ª–∞–Ω—Å–∏ –≤ –≥—Ä–∏–≤–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        current_balance_grn = current_balance / 100
        calculated_balance_grn = calculated_balance / 100
        if abs(current_balance_grn - calculated_balance_grn) < 0.01:  # –¥–æ–ø—É—Å–∫ –Ω–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
            print("‚úÖ –ë–∞–ª–∞–Ω—Å –∑–±—ñ–≥–∞—î—Ç—å—Å—è!")
        else:
            print("‚ùå –ü–û–ú–ò–õ–ö–ê: –ë–∞–ª–∞–Ω—Å–∏ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è!")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó
        last_bonus_update = conn.execute(
            text(
                """
            SELECT MAX(processed_at) as last_bonus_op
            FROM transaction_bonus
            WHERE client_id = :client_id
        """
            ),
            {"client_id": client_id},
        ).scalar()

        if last_bonus_update:
            print(f"‚è∞ –û—Å—Ç–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è: {format_datetime(last_bonus_update)}")
            print(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {format_datetime(client_info[5])}")

        print("=" * 80)


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    if len(sys.argv) < 2:
        print("üîç –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ–Ω—É—Å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞")
        print("\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("  python check_client_bonus.py <client_id>")
        print("\n–ü—Ä–∏–∫–ª–∞–¥–∏:")
        print("  python check_client_bonus.py 2415")
        print("  python check_client_bonus.py 9652")

        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –±–æ–Ω—É—Å–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏
        engine = create_engine(settings.DATABASE_URL)
        with engine.connect() as conn:
            sample_clients = conn.execute(
                text(
                    """
                SELECT DISTINCT tb.client_id,
                       COALESCE(c.firstname || ' ' || c.lastname, c.phone) as name,
                       c.phone, c.bonus
                FROM transaction_bonus tb
                INNER JOIN clients c ON tb.client_id = c.client_id
                ORDER BY c.bonus DESC
                LIMIT 5
            """
                )
            ).fetchall()

            if sample_clients:
                print("\nüéØ –ö–ª—ñ—î–Ω—Ç–∏ –∑ –±–æ–Ω—É—Å–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏:")
                for client in sample_clients:
                    name = client[1] or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
                    phone = client[2] or "–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω—É"
                    balance = format_client_balance(client[3])
                    print(f"  ID: {client[0]} | {name} | {phone} | –ë–∞–ª–∞–Ω—Å: {balance}")

        return

    try:
        client_id = int(sys.argv[1])
        get_client_bonus_info(client_id)
    except ValueError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: Client ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    main()
